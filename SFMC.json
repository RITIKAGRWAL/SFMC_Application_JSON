{"appVersion":"246.0.23","id":"v6a9idh8ra","name":"My Definition - December 27, 2023 at 2:52:54 PM","version":1,"modelVersion":"4","references":{"microsites/262735":[{"identifier":"cloudPageCollections/407","relationship":"required"}],"cloudPageCollections/407":[],"siteMapVersions/262735-30":[{"identifier":"microsites/262735","relationship":"required"}],"codeResources/288123":[{"identifier":"cloudPageCollections/407","relationship":"required"},{"identifier":"categories/9745","relationship":"required"}],"codeResources/246031":[{"identifier":"cloudPageCollections/407","relationship":"required"},{"identifier":"categories/9745","relationship":"required"}],"codeResources/356134":[{"identifier":"cloudPageCollections/407","relationship":"required"},{"identifier":"categories/9745","relationship":"required"}],"codeResources/246936":[{"identifier":"cloudPageCollections/407","relationship":"required"},{"identifier":"categories/9745","relationship":"required"}],"codeResources/246033":[{"identifier":"cloudPageCollections/407","relationship":"required"},{"identifier":"categories/9745","relationship":"required"}],"codeResources/246032":[{"identifier":"cloudPageCollections/407","relationship":"required"},{"identifier":"categories/9745","relationship":"required"}],"codeResources/246035":[{"identifier":"cloudPageCollections/407","relationship":"required"},{"identifier":"categories/9745","relationship":"required"}],"landingPages/246030-1584":[{"identifier":"primaryLandingPages/246030-1584","relationship":"required"},{"identifier":"categories/9745","relationship":"required"}],"primaryLandingPages/246030-1584":[{"identifier":"cloudPageCollections/407","relationship":"required"},{"identifier":"categories/9745","relationship":"required"}],"categories/9745":[]},"input":[{"key":"cloudPages-domain","type":"entityPicker","label":"FIELD_DEFINITION_CLOUDPAGES_DOMAIN","meta":{"entityType":"cloudpagesDomain"},"isSystem":true,"entities":["codeResources/246031","codeResources/246032","codeResources/246033","codeResources/246035","codeResources/246936","codeResources/288123","codeResources/356134","microsites/262735","primaryLandingPages/246030-1584"]}],"config":{"preserveCategories":false,"storeImagesAsReferences":false},"entities":{"assets":{},"attributeGroups":{},"attributeRelationships":{},"attributeSets":{},"automations":{},"categories":{"9745":{"issues":[],"originID":"9745","originEID":"mch4s3mv5j6r7tyf5xqf8s0-y2wm","data":{"description":"The root folder for assets","categoryType":"asset","parentId":0,"name":"Content Builder","editable":0,"extendable":1}}},"cloudPageCollections":{"407":{"issues":[],"originID":"407","originEID":"mch4s3mv5j6r7tyf5xqf8s0-y2wm","data":{"name":"QA1-Updates-PathFinderApp"}}},"codeResources":{"246031":{"issues":[],"originID":"246031","originEID":"mch4s3mv5j6r7tyf5xqf8s0-y2wm","data":{"code":"<script runat=\"server\">\nPlatform.Load('core', '1.1.1');\n\nfunction retrieveRecords(config) {\n  var requestBody = Platform.Request.GetPostData();\n  var parseEmail = Platform.Function.ParseJSON(requestBody);\n  var searchEmailAddress = parseEmail.Email;\n  //var searchSubscriberKey = parseEmail.SubscriberKey;\n  \n  var deNames = [];\n  var jsonData = [];\n  var prox = new Script.Util.WSProxy();\n  \n  var data = prox.retrieve(\"DataExtension\", config.cols);\n  var dataResult = data.Results;\n  \n  for (i = 0; i < dataResult.length; i++){\n    var dataExtenisonName = data.Results[i].Name;\n    \n    var attr = DataExtension.Retrieve({Property:\"Name\",SimpleOperator:\"equals\",Value:dataExtenisonName});   \n    var de = DataExtension.Init(attr[0].CustomerKey);\n    var dename = attr[0].Name;\n    var fields = de.Fields.Retrieve();\n    var hasEmailAddressField = false;\n    var hasSubscriberKeyField = false;\n    \n    for (var j = 0; j < fields.length; j++){\n      var FieldName = fields[j].Name;\n      if(FieldName == \"EmailAddress\"){\n        hasEmailAddressField = true;\n      }\n      if(FieldName == \"SubscriberKey\"){\n        hasSubscriberKeyField = true;\n      }\n    }\n    \n    if(hasEmailAddressField && hasSubscriberKeyField){\n      var dataInit = DataExtension.Init(dename);\n      var lookupRows = dataInit.Rows.Lookup([\"EmailAddress\"],[searchEmailAddress],\"SubscriberKey\");\n      if(lookupRows.length > 0){\n        for(s= 0; s < lookupRows.length; s++){\n          var row = lookupRows[s];\n          var subscriberKey = row.SubscriberKey;\n          //deNames.push(\"SubscriberKey\":subscriberKey, \"DataExtensionName\":dename);\n            var existingIndex = -1;\n            for(var k = 0; k < deNames.length; k++){\n              if(deNames[k].SubscriberKey == subscriberKey && deNames[k].DataExtensionName == dename){\n                existingIndex = k;\n                break;\n              }\n            }\n            if(existingIndex == -1){\n              var rowObj = {\"SubscriberKey\":subscriberKey, \"DataExtensionName\":dename};\n              deNames.push(rowObj);\n            }\n        }\n      }\n    }\n  }\n          \n  if(deNames.length > 0){\n    for(var k = 0; k < deNames.length; k++){\n      var stack = 12;\n      var DEval = deNames[k].DataExtensionName;\n      var subKeyValue = deNames[k].SubscriberKey;\n      var FindDE = DataExtension.Retrieve({Property:\"Name\",SimpleOperator:\"equals\",Value:DEval});\n      var FolderID = FindDE[0].CategoryID;\n      var ObjectID = FindDE[0].ObjectID;\n      var CustomerKey = FindDE[0].CustomerKey;\n      var url = 'https://mc.s' + stack + '.marketingcloudapps.com/' + 'contactsmeta/admin.html#admin/data-extension/' + ObjectID;\n      var DEname = FindDE[0].Name;\n      var list = [];\n      list.push(DEname);\n      \n      var path = function(id) {\n        if (id> 0) {\n          var results = Folder.Retrieve({Property:\"ID\",SimpleOperator:\"equals\",Value:id});\n          list.unshift(results [0].Name);\n          return path(results[0].ParentFolder.ID);\n        } else {\n          return id;\n        }\n      };\n      \n      path(FolderID);\n      var dePath = list.join(\"> \");\n      \n      var jsonString = {\n        \"DataExtensionName\": DEval,\n        \"SubscriberKey\": subKeyValue,\n        \"DataExtensionKey\": CustomerKey,\n        \"DataExtensionPath\": dePath,\n        \"URL\": url \n      };\n      \n      jsonData.push(jsonString);\n    }\n    \n    Platform.Response.Write(Stringify(jsonData));\n  } else {\n    Platform.Response.Write(Stringify(jsonData));\n  }\n}\n\ntry {\n  var config = {\n    cols: [\"Name\"]\n  } \n  var records = retrieveRecords(config);\n} catch(e) {\n  //Write('Message: '+ Stringify(e));\n}\n</script>","collectionId":"{{mcpm#/entities/cloudPageCollections/407/data/collectionId}}","contentType":"application/javascript","cultureCode":"en-US","description":"","domain":"{{mcpm:cloudPages-domain}}","key":"getRecords","name":"getRecords","requiresSsl":true,"url":"https://cloud.email-v2force.com/getRecords","asset":{"assetType":{"id":240,"name":"jscoderesource"},"description":"","name":"getRecords","category":{"id":"{{mcpm#/entities/categories/9745/data/id}}","name":"Content Builder","parentId":0},"content":"<script runat=\"server\">\nPlatform.Load('core', '1.1.1');\n\nfunction retrieveRecords(config) {\n  var requestBody = Platform.Request.GetPostData();\n  var parseEmail = Platform.Function.ParseJSON(requestBody);\n  var searchEmailAddress = parseEmail.Email;\n  //var searchSubscriberKey = parseEmail.SubscriberKey;\n  \n  var deNames = [];\n  var jsonData = [];\n  var prox = new Script.Util.WSProxy();\n  \n  var data = prox.retrieve(\"DataExtension\", config.cols);\n  var dataResult = data.Results;\n  \n  for (i = 0; i < dataResult.length; i++){\n    var dataExtenisonName = data.Results[i].Name;\n    \n    var attr = DataExtension.Retrieve({Property:\"Name\",SimpleOperator:\"equals\",Value:dataExtenisonName});   \n    var de = DataExtension.Init(attr[0].CustomerKey);\n    var dename = attr[0].Name;\n    var fields = de.Fields.Retrieve();\n    var hasEmailAddressField = false;\n    var hasSubscriberKeyField = false;\n    \n    for (var j = 0; j < fields.length; j++){\n      var FieldName = fields[j].Name;\n      if(FieldName == \"EmailAddress\"){\n        hasEmailAddressField = true;\n      }\n      if(FieldName == \"SubscriberKey\"){\n        hasSubscriberKeyField = true;\n      }\n    }\n    \n    if(hasEmailAddressField && hasSubscriberKeyField){\n      var dataInit = DataExtension.Init(dename);\n      var lookupRows = dataInit.Rows.Lookup([\"EmailAddress\"],[searchEmailAddress],\"SubscriberKey\");\n      if(lookupRows.length > 0){\n        for(s= 0; s < lookupRows.length; s++){\n          var row = lookupRows[s];\n          var subscriberKey = row.SubscriberKey;\n          //deNames.push(\"SubscriberKey\":subscriberKey, \"DataExtensionName\":dename);\n            var existingIndex = -1;\n            for(var k = 0; k < deNames.length; k++){\n              if(deNames[k].SubscriberKey == subscriberKey && deNames[k].DataExtensionName == dename){\n                existingIndex = k;\n                break;\n              }\n            }\n            if(existingIndex == -1){\n              var rowObj = {\"SubscriberKey\":subscriberKey, \"DataExtensionName\":dename};\n              deNames.push(rowObj);\n            }\n        }\n      }\n    }\n  }\n          \n  if(deNames.length > 0){\n    for(var k = 0; k < deNames.length; k++){\n      var stack = 12;\n      var DEval = deNames[k].DataExtensionName;\n      var subKeyValue = deNames[k].SubscriberKey;\n      var FindDE = DataExtension.Retrieve({Property:\"Name\",SimpleOperator:\"equals\",Value:DEval});\n      var FolderID = FindDE[0].CategoryID;\n      var ObjectID = FindDE[0].ObjectID;\n      var CustomerKey = FindDE[0].CustomerKey;\n      var url = 'https://mc.s' + stack + '.marketingcloudapps.com/' + 'contactsmeta/admin.html#admin/data-extension/' + ObjectID;\n      var DEname = FindDE[0].Name;\n      var list = [];\n      list.push(DEname);\n      \n      var path = function(id) {\n        if (id> 0) {\n          var results = Folder.Retrieve({Property:\"ID\",SimpleOperator:\"equals\",Value:id});\n          list.unshift(results [0].Name);\n          return path(results[0].ParentFolder.ID);\n        } else {\n          return id;\n        }\n      };\n      \n      path(FolderID);\n      var dePath = list.join(\"> \");\n      \n      var jsonString = {\n        \"DataExtensionName\": DEval,\n        \"SubscriberKey\": subKeyValue,\n        \"DataExtensionKey\": CustomerKey,\n        \"DataExtensionPath\": dePath,\n        \"URL\": url \n      };\n      \n      jsonData.push(jsonString);\n    }\n    \n    Platform.Response.Write(Stringify(jsonData));\n  } else {\n    Platform.Response.Write(Stringify(jsonData));\n  }\n}\n\ntry {\n  var config = {\n    cols: [\"Name\"]\n  } \n  var records = retrieveRecords(config);\n} catch(e) {\n  //Write('Message: '+ Stringify(e));\n}\n</script>","contentType":"application/javascript","customerKey":"fe834c8b-fd4d-41a5-afad-32f19f2aa98b"}}},"246032":{"issues":[],"originID":"246032","originEID":"mch4s3mv5j6r7tyf5xqf8s0-y2wm","data":{"code":"<script runat=\"server\">\n  Platform.Load(\"core\",\"1.1.1\");\n\n  var prox = new Script.Util.WSProxy();\n  var postedData = Platform.Request.GetPostData();\n  /* Parse Stringified JSON back to Object */\n  var parsedData = Platform.Function.ParseJSON(postedData);\n\n  var EmailAddress = parsedData.Email;\n  //var subscriberKey = \"atul.agarwal@v2force.com\";\n  //console.log(\"11->\" +EmailAddress);\n  var listLidArray = [];\n  var finalListArray = [];\n\n  var cols = [\"Status\",\"Client.ID\",\"SubscriberKey\"];\n  var filter = {\n    Property: \"EmailAddress\",\n    SimpleOperator: \"equals\",\n    Value: EmailAddress\n  };\n  var desc = prox.retrieve(\"Subscriber\", cols, filter);\n\n  if(desc && desc.Results.length > 0){\n\n    for(var i = 0; i < desc.Results.length; i++){\n\n      var subscriberKey = desc.Results[i].SubscriberKey;\n      var configJSON = {\n        \"cols\": [\"ListID\",\"Status\",\"SubscriberKey\"],\n        \"filter\": {\n          \"Property\": \"SubscriberKey\",\n          \"SimpleOperator\": \"equals\",\n          \"Value\": subscriberKey\n        }\n      };\n      listLidArray.push({\"SubscriberKey\":subscriberKey, \"configJSON\":configJSON});\n    }\n  }\n  else{\n    Platform.Response.Write(Stringify(finalListArray));\n  }\n\n  if(listLidArray.length > 0){\n    for(var i = 0; i < listLidArray.length; i++){\n      \n      var findedSubscribeCols = listLidArray[i].configJSON.cols;\n      var findedSubscribeFilter = listLidArray[i].configJSON.filter;\n      var result = prox.retrieve(\"ListSubscriber\", findedSubscribeCols, findedSubscribeFilter);\n\n      if(result && result.Results){\n        for(var j = 0; j < result.Results.length; j++){\n          var listID = result.Results[j].ListID;\n          var Status = result.Results[j].Status;\n          var SubscriberKey = result.Results[j].SubscriberKey;\n          var req = prox.retrieve(\"List\", [\"ListName\", \"Category\", \"ID\"], {\n            Property: \"ID\",\n            SimpleOperator: \"equals\",\n            Value: listID\n          });\n\n          if(req && req.Results){\n            var listName = req.Results[0].ListName;\n            var listId = req.Results[0].ID;\n            var id = req.Results[0].Category;\n            var list = [listName];\n            //Write(listName);\n            //Write(id);\n            while(id > 0) {\n              var req = prox.retrieve(\"DataFolder\", [\"Name\",\"ParentFolder.ID\"], { \n                Property: \"ID\", \n                SimpleOperator: \"equals\", \n                Value: id \n              });\n              var dataFolderName = req.Results[0].Name;\n              list.unshift(req.Results[0].Name);\n              id = req.Results[0].ParentFolder.ID;\n              \n              var listPath = list.join(\" > \");\n              //finalListArray.push({\"SubscriberKey\": SubscriberKey, \"ListID\": listId, \"ListName\":listName,\"DataFolder\":dataFolderName,\"ListPath\":listPath, \"Status\":Status});\n              var configFinalJOSN = {\n                \"SubscriberKey\":SubscriberKey,\n                \"ListID\":listId,\n                \"ListName\":listName,\n                \"DataFolder\":dataFolderName,\n                \"ListPath\":listPath,\n                \"Status\":Status\n              }\n              finalListArray.push(configFinalJOSN);\n            }\n          }\n        }\n      }\n    }\n    Platform.Response.Write(Stringify(finalListArray));\n  }\n/*for(var j = 0; j < finalListArray.length; j++){\n    Write(\" SubscriberKey: \" +finalListArray[j].SubscriberKey+ \" ListID: \" +finalListArray[j].ListID+ \" ListName: \" +finalListArray[j].ListName+ \" DataFolder: \" +finalListArray[j].DataFolder+ \" ListPath: \" +finalListArray[j].ListPath+ \" Status: \" +finalListArray[j].Status);\n  }*/\n</script>","collectionId":"{{mcpm#/entities/cloudPageCollections/407/data/collectionId}}","contentType":"application/javascript","cultureCode":"en-US","description":"","domain":"{{mcpm:cloudPages-domain}}","key":"allSubscriberlist","name":"allSubscriberDetails","requiresSsl":true,"url":"https://cloud.email-v2force.com/allSubscriberlist","asset":{"assetType":{"id":240,"name":"jscoderesource"},"description":"","name":"allSubscriberDetails (1)","category":{"id":"{{mcpm#/entities/categories/9745/data/id}}","name":"Content Builder","parentId":0},"content":"<script runat=\"server\">\n  Platform.Load(\"core\",\"1.1.1\");\n\n  var prox = new Script.Util.WSProxy();\n  var postedData = Platform.Request.GetPostData();\n  /* Parse Stringified JSON back to Object */\n  var parsedData = Platform.Function.ParseJSON(postedData);\n\n  var EmailAddress = parsedData.Email;\n  //var subscriberKey = \"atul.agarwal@v2force.com\";\n  //console.log(\"11->\" +EmailAddress);\n  var listLidArray = [];\n  var finalListArray = [];\n\n  var cols = [\"Status\",\"Client.ID\",\"SubscriberKey\"];\n  var filter = {\n    Property: \"EmailAddress\",\n    SimpleOperator: \"equals\",\n    Value: EmailAddress\n  };\n  var desc = prox.retrieve(\"Subscriber\", cols, filter);\n\n  if(desc && desc.Results.length > 0){\n\n    for(var i = 0; i < desc.Results.length; i++){\n\n      var subscriberKey = desc.Results[i].SubscriberKey;\n      var configJSON = {\n        \"cols\": [\"ListID\",\"Status\",\"SubscriberKey\"],\n        \"filter\": {\n          \"Property\": \"SubscriberKey\",\n          \"SimpleOperator\": \"equals\",\n          \"Value\": subscriberKey\n        }\n      };\n      listLidArray.push({\"SubscriberKey\":subscriberKey, \"configJSON\":configJSON});\n    }\n  }\n  else{\n    Platform.Response.Write(Stringify(finalListArray));\n  }\n\n  if(listLidArray.length > 0){\n    for(var i = 0; i < listLidArray.length; i++){\n      \n      var findedSubscribeCols = listLidArray[i].configJSON.cols;\n      var findedSubscribeFilter = listLidArray[i].configJSON.filter;\n      var result = prox.retrieve(\"ListSubscriber\", findedSubscribeCols, findedSubscribeFilter);\n\n      if(result && result.Results){\n        for(var j = 0; j < result.Results.length; j++){\n          var listID = result.Results[j].ListID;\n          var Status = result.Results[j].Status;\n          var SubscriberKey = result.Results[j].SubscriberKey;\n          var req = prox.retrieve(\"List\", [\"ListName\", \"Category\", \"ID\"], {\n            Property: \"ID\",\n            SimpleOperator: \"equals\",\n            Value: listID\n          });\n\n          if(req && req.Results){\n            var listName = req.Results[0].ListName;\n            var listId = req.Results[0].ID;\n            var id = req.Results[0].Category;\n            var list = [listName];\n            //Write(listName);\n            //Write(id);\n            while(id > 0) {\n              var req = prox.retrieve(\"DataFolder\", [\"Name\",\"ParentFolder.ID\"], { \n                Property: \"ID\", \n                SimpleOperator: \"equals\", \n                Value: id \n              });\n              var dataFolderName = req.Results[0].Name;\n              list.unshift(req.Results[0].Name);\n              id = req.Results[0].ParentFolder.ID;\n              \n              var listPath = list.join(\" > \");\n              //finalListArray.push({\"SubscriberKey\": SubscriberKey, \"ListID\": listId, \"ListName\":listName,\"DataFolder\":dataFolderName,\"ListPath\":listPath, \"Status\":Status});\n              var configFinalJOSN = {\n                \"SubscriberKey\":SubscriberKey,\n                \"ListID\":listId,\n                \"ListName\":listName,\n                \"DataFolder\":dataFolderName,\n                \"ListPath\":listPath,\n                \"Status\":Status\n              }\n              finalListArray.push(configFinalJOSN);\n            }\n          }\n        }\n      }\n    }\n    Platform.Response.Write(Stringify(finalListArray));\n  }\n/*for(var j = 0; j < finalListArray.length; j++){\n    Write(\" SubscriberKey: \" +finalListArray[j].SubscriberKey+ \" ListID: \" +finalListArray[j].ListID+ \" ListName: \" +finalListArray[j].ListName+ \" DataFolder: \" +finalListArray[j].DataFolder+ \" ListPath: \" +finalListArray[j].ListPath+ \" Status: \" +finalListArray[j].Status);\n  }*/\n</script>","contentType":"application/javascript","customerKey":"61645950-281d-45f3-8b7e-900517343885"}}},"246033":{"issues":[],"originID":"246033","originEID":"mch4s3mv5j6r7tyf5xqf8s0-y2wm","data":{"code":"<script runat=\"server\">\n  Platform.Load(\"core\", \"1.1.1\");\n  \n  var postedData = Platform.Request.GetPostData();\n  /* Parse Stringified JSON back to Object */\n  var parsedData = Platform.Function.ParseJSON(postedData);\n    \n  var subsriberKey = parsedData.SubscriberKey;\n  var listId = parsedData.ListID;\n  var listName = parsedData.ListName;\n  var folderName = parsedData.Folder;\n  var status = parsedData.Status;\n\n   //Write(\"listName----->\" +listName);\n   //Write(\"Status----->\" +status);\n  \n  if(listName != \"All Subscribers\" && status == \"Unsubscribed\"){\n    \n       \n            var subscriber = {\n                  SubscriberKey: subsriberKey,\n                  Status: \"Active\",\n                  Lists: [\n                    {\n                      ID: listId\n                    },\n                    {\n                      Status: \"Active\",\n                      ID: listId\n                    }\n                  ]\n                };\n      \n     }\n     else if(listName != \"All Subscribers\" && status == \"Active\"){\n       \n              \n               var subscriber = {\n                  SubscriberKey: subsriberKey,\n                  Lists: [\n                    {\n                      ID: listId\n                    },\n                    {\n                      Status: \"Unsubscribed\",\n                      ID: listId\n                    }\n                  ]\n                };\n       \n     }\n     else if(listName != \"All Subscribers\" && (status == \"Bounced\" || status == \"Held\" || status == \"Delete\")){\n       \n              \n               var subscriber = {\n                  SubscriberKey: subsriberKey,\n                  Lists: [\n                    {\n                      ID: listId\n                    },\n                    {\n                      Status: \"Unsubscribed\",\n                      ID: listId\n                    }\n                  ]\n                };\n       \n     }\n     else if(listName == \"All Subscribers\" && status == \"Active\"){\n       \n       \n                  var  subscriber = {\n                  \"SubscriberKey\":subsriberKey,\n                  \"Status\":\"Unsubscribed\"\n                  };\n             \n     }\n     else if(listName == \"All Subscribers\" && status == \"Unsubscribed\"){\n       \n                 var  subscriber = {\n                  \"SubscriberKey\":subsriberKey,\n                  \"Status\":\"Active\"\n                  };\n\n    }\n    else{\n      var  subscriber = {\n                  \"SubscriberKey\":subsriberKey,\n                  \"Status\":\"Unsubscribed\"\n                  };\n    }\n    try {\n     // Write(\"<br>JSON: \" + Stringify(subscriber));\n      var subObj = Subscriber.Init(subsriberKey);\n      var res = subObj.Update(subscriber);\n     // Write(\"<br>Response: \" + Stringify(res));\n      if(res == \"OK\"){\n            var configResponse = {\n                    \"Status\":res,\n                    \"Message\":\"Subscriber Status Updated !\"\n             }\n        \n       }\n      else{\n        \n         var configResponse = {\n                    \"Status\":\"Not\",\n                    \"Message\":\"Subscriber Status Not Updated !\"\n             }\n      }\n      \n      //Platform.Response.ContentType = \"application/json\";\n      Platform.Response.Write(Stringify(configResponse));\n    } catch (error) {\n      Write(\"<br>error: \" + Stringify(error));\n      //Platform.Response.Write(Stringify(configResponse));\n    }\n  }\n</script>","collectionId":"{{mcpm#/entities/cloudPageCollections/407/data/collectionId}}","contentType":"application/javascript","cultureCode":"en-US","description":"","domain":"{{mcpm:cloudPages-domain}}","key":"updateSubscriber","name":"updateSubscriberStatus","requiresSsl":true,"url":"https://cloud.email-v2force.com/updateSubscriber","asset":{"assetType":{"id":240,"name":"jscoderesource"},"description":"","name":"updateSubscriberStatus (2)","category":{"id":"{{mcpm#/entities/categories/9745/data/id}}","name":"Content Builder","parentId":0},"content":"<script runat=\"server\">\n  Platform.Load(\"core\", \"1.1.1\");\n  \n  var postedData = Platform.Request.GetPostData();\n  /* Parse Stringified JSON back to Object */\n  var parsedData = Platform.Function.ParseJSON(postedData);\n    \n  var subsriberKey = parsedData.SubscriberKey;\n  var listId = parsedData.ListID;\n  var listName = parsedData.ListName;\n  var folderName = parsedData.Folder;\n  var status = parsedData.Status;\n\n   //Write(\"listName----->\" +listName);\n   //Write(\"Status----->\" +status);\n  \n  if(listName != \"All Subscribers\" && status == \"Unsubscribed\"){\n    \n       \n            var subscriber = {\n                  SubscriberKey: subsriberKey,\n                  Status: \"Active\",\n                  Lists: [\n                    {\n                      ID: listId\n                    },\n                    {\n                      Status: \"Active\",\n                      ID: listId\n                    }\n                  ]\n                };\n      \n     }\n     else if(listName != \"All Subscribers\" && status == \"Active\"){\n       \n              \n               var subscriber = {\n                  SubscriberKey: subsriberKey,\n                  Lists: [\n                    {\n                      ID: listId\n                    },\n                    {\n                      Status: \"Unsubscribed\",\n                      ID: listId\n                    }\n                  ]\n                };\n       \n     }\n     else if(listName != \"All Subscribers\" && (status == \"Bounced\" || status == \"Held\" || status == \"Delete\")){\n       \n              \n               var subscriber = {\n                  SubscriberKey: subsriberKey,\n                  Lists: [\n                    {\n                      ID: listId\n                    },\n                    {\n                      Status: \"Unsubscribed\",\n                      ID: listId\n                    }\n                  ]\n                };\n       \n     }\n     else if(listName == \"All Subscribers\" && status == \"Active\"){\n       \n       \n                  var  subscriber = {\n                  \"SubscriberKey\":subsriberKey,\n                  \"Status\":\"Unsubscribed\"\n                  };\n             \n     }\n     else if(listName == \"All Subscribers\" && status == \"Unsubscribed\"){\n       \n                 var  subscriber = {\n                  \"SubscriberKey\":subsriberKey,\n                  \"Status\":\"Active\"\n                  };\n\n    }\n    else{\n      var  subscriber = {\n                  \"SubscriberKey\":subsriberKey,\n                  \"Status\":\"Unsubscribed\"\n                  };\n    }\n    try {\n     // Write(\"<br>JSON: \" + Stringify(subscriber));\n      var subObj = Subscriber.Init(subsriberKey);\n      var res = subObj.Update(subscriber);\n     // Write(\"<br>Response: \" + Stringify(res));\n      if(res == \"OK\"){\n            var configResponse = {\n                    \"Status\":res,\n                    \"Message\":\"Subscriber Status Updated !\"\n             }\n        \n       }\n      else{\n        \n         var configResponse = {\n                    \"Status\":\"Not\",\n                    \"Message\":\"Subscriber Status Not Updated !\"\n             }\n      }\n      \n      //Platform.Response.ContentType = \"application/json\";\n      Platform.Response.Write(Stringify(configResponse));\n    } catch (error) {\n      Write(\"<br>error: \" + Stringify(error));\n      //Platform.Response.Write(Stringify(configResponse));\n    }\n  }\n</script>","contentType":"application/javascript","customerKey":"4d132b00-e2ad-4bbf-849f-d8fc1b3190ec"}}},"246035":{"issues":[],"originID":"246035","originEID":"mch4s3mv5j6r7tyf5xqf8s0-y2wm","data":{"code":"\n<script runat=\"server\">    \nPlatform.Load(\"core\", \"1.1.1\");\ntry\n {  \n    var postedData = Platform.Request.GetPostData();\n    /* Parse Stringified JSON back to Object */\n    var parsedData = Platform.Function.ParseJSON(postedData);\n   \n   \n    var selectedRows = parsedData.SelectedDE;\n    //var trimmedStrEmail = EmailAddress.trim();\n    //Write(\"Data---->\" +selectedRows);\n    var EmailAddress = parsedData.EmailAddress;\n    //Write(\"Email---->\" +EmailAddress);\n    var responseArray = [];\n    for (p = 0; p < selectedRows.length; p++){\n          var subscriberKey = selectedRows[p][0];\n          var DataExtensionName = selectedRows[p][1];\n          var DataExtensionKey = selectedRows[p][2];\n          var rowDelete = Platform.Function.DeleteData(DataExtensionName,['SubscriberKey'],[subscriberKey]);\n            //var response = DataInit.Rows.Remove([\"EmailAddress\", EmailAddressFetch], [\"SubscriberKey\", SubscriberKey]);\n            //Write(\"Response---->\" +Stringify(rowDelete));\n           if(rowDelete == \"1\"){\n             var reponsestatus = \"OK\";\n             var configJSON = {\n              \"Status\":reponsestatus,\n              \"DataExtensionName\" : DataExtensionName,\n              \"SubscriberKey\" : subscriberKey\n            }\n           }\n           else if(rowDelete != \"1\"){\n             var reponsestatus = \"NOT\";\n             var configJSON = {\n              \"Status\":reponsestatus,\n              \"DataExtensionName\" : DataExtensionName,\n              \"SubscriberKey\": subscriberKey\n            }\n           }\n           else{\n             \n           }\n      responseArray.push(configJSON);\n    }\n   Platform.Response.Write(Stringify(responseArray));\n } \ncatch (error) \n{\n    Platform.Response.Write(Stringify(responseArray));\n}\n\n</script>","collectionId":"{{mcpm#/entities/cloudPageCollections/407/data/collectionId}}","contentType":"application/javascript","cultureCode":"en-US","description":"","domain":"{{mcpm:cloudPages-domain}}","key":"deleteSubscriberDataRecord","name":"deleteSubscriber","requiresSsl":true,"url":"https://cloud.email-v2force.com/deleteSubscriberDataRecord","asset":{"assetType":{"id":240,"name":"jscoderesource"},"description":"","name":"deleteSubscriber (1)","category":{"id":"{{mcpm#/entities/categories/9745/data/id}}","name":"Content Builder","parentId":0},"content":"\n<script runat=\"server\">    \nPlatform.Load(\"core\", \"1.1.1\");\ntry\n {  \n    var postedData = Platform.Request.GetPostData();\n    /* Parse Stringified JSON back to Object */\n    var parsedData = Platform.Function.ParseJSON(postedData);\n   \n   \n    var selectedRows = parsedData.SelectedDE;\n    //var trimmedStrEmail = EmailAddress.trim();\n    //Write(\"Data---->\" +selectedRows);\n    var EmailAddress = parsedData.EmailAddress;\n    //Write(\"Email---->\" +EmailAddress);\n    var responseArray = [];\n    for (p = 0; p < selectedRows.length; p++){\n          var subscriberKey = selectedRows[p][0];\n          var DataExtensionName = selectedRows[p][1];\n          var DataExtensionKey = selectedRows[p][2];\n          var rowDelete = Platform.Function.DeleteData(DataExtensionName,['SubscriberKey'],[subscriberKey]);\n            //var response = DataInit.Rows.Remove([\"EmailAddress\", EmailAddressFetch], [\"SubscriberKey\", SubscriberKey]);\n            //Write(\"Response---->\" +Stringify(rowDelete));\n           if(rowDelete == \"1\"){\n             var reponsestatus = \"OK\";\n             var configJSON = {\n              \"Status\":reponsestatus,\n              \"DataExtensionName\" : DataExtensionName,\n              \"SubscriberKey\" : subscriberKey\n            }\n           }\n           else if(rowDelete != \"1\"){\n             var reponsestatus = \"NOT\";\n             var configJSON = {\n              \"Status\":reponsestatus,\n              \"DataExtensionName\" : DataExtensionName,\n              \"SubscriberKey\": subscriberKey\n            }\n           }\n           else{\n             \n           }\n      responseArray.push(configJSON);\n    }\n   Platform.Response.Write(Stringify(responseArray));\n } \ncatch (error) \n{\n    Platform.Response.Write(Stringify(responseArray));\n}\n\n</script>","contentType":"application/javascript","customerKey":"50a6b11c-525d-4b15-af15-ca3db40dae29"}}},"246936":{"issues":[],"originID":"246936","originEID":"mch4s3mv5j6r7tyf5xqf8s0-y2wm","data":{"code":"<script runat=\"server\">\n  Platform.Load(\"core\", \"1.1.1\");\n  \n  var api = new Script.Util.WSProxy();\n  \n  var subscriberKey = \"en17el301021@medicaps.ac.in\"; // Specify the SubscriberKey to search for\n  var listLidArray = [];\n  var FinalListArray = [];\n  var cols = [\"ListID\"]; // Columns to retrieve\n  \n  var filter = {\n    Property: \"SubscriberKey\",\n    SimpleOperator: \"equals\",\n    Value: subscriberKey\n  };\n  \n  var result = api.retrieve(\"ListSubscriber\", cols, filter);\n  \n  // Output the ListID and ListName\n  for (var i = 0; i < result.Results.length; i++) {\n    var listID = result.Results[i].ListID;\n    //var listName = result.Results[i].ListName;\n    \n    // Output the ListName and ListID\n    //Write(\"List Name: \" + listName + \"<br>\");\n    //Write(\"List ID: \" + listID + \"<br>\");\n    listLidArray.push({\"ListID\": listID});\n  }\n  \nif(listLidArray.length > 0){\n  \n  for(var i = 0; i < listLidArray.length; i++){\n    var listID = listLidArray[i].ListID;\n    \n      \n    var req = api.retrieve(\"List\", [\"ListName\", \"Category\", \"ID\"], {\n    Property: \"ID\",\n    SimpleOperator: \"equals\",\n    Value: listID\n});\n\nvar list = [req.Results[0].ListName];\n    \n    \nvar listName = [req.Results[0].ListName];\nvar listId = [req.Results[0].ID];\n//Write(\"ListName: \" +list);\n//Write(\"List Id: \" +listId);\nvar id = req.Results[0].Category;\n\nwhile(id > 0) {\n\n    var req = api.retrieve(\"DataFolder\", [\"Name\",\"ParentFolder.ID\"], { \n        Property: \"ID\", \n        SimpleOperator: \"equals\", \n        Value: id \n    });\n    var DataFolderName = req.Results[0].Name;\n    list.unshift(req.Results[0].Name);\n    id = req.Results[0].ParentFolder.ID;\n  \n    var res = list.join(\" / \");\n    FinalListArray.push({\"ListID\": listId, \"ListName\":listName,\"DataFolder\":DataFolderName,\"ListPath\":res});\n  \n    \n}\n    \n}//for close\n}// if check close\n\nfor(var j = 0; j < FinalListArray.length; j++){\nWrite(\"ListID: \" +FinalListArray[j].ListID+ \" ListName: \" +FinalListArray[j].ListName+ \" DataFolder: \" +FinalListArray[j].DataFolder+ \" ListPath: \" +FinalListArray[j].ListPath);\n}\n</script>","collectionId":"{{mcpm#/entities/cloudPageCollections/407/data/collectionId}}","contentType":"application/javascript","cultureCode":"en-US","description":"","domain":"{{mcpm:cloudPages-domain}}","key":"getlist","name":"findingLists","requiresSsl":true,"url":"https://cloud.email-v2force.com/getlist","asset":{"assetType":{"id":240,"name":"jscoderesource"},"description":"","name":"findingLists","category":{"id":"{{mcpm#/entities/categories/9745/data/id}}","name":"Content Builder","parentId":0},"content":"<script runat=\"server\">\n  Platform.Load(\"core\", \"1.1.1\");\n  \n  var api = new Script.Util.WSProxy();\n  \n  var subscriberKey = \"en17el301021@medicaps.ac.in\"; // Specify the SubscriberKey to search for\n  var listLidArray = [];\n  var FinalListArray = [];\n  var cols = [\"ListID\"]; // Columns to retrieve\n  \n  var filter = {\n    Property: \"SubscriberKey\",\n    SimpleOperator: \"equals\",\n    Value: subscriberKey\n  };\n  \n  var result = api.retrieve(\"ListSubscriber\", cols, filter);\n  \n  // Output the ListID and ListName\n  for (var i = 0; i < result.Results.length; i++) {\n    var listID = result.Results[i].ListID;\n    //var listName = result.Results[i].ListName;\n    \n    // Output the ListName and ListID\n    //Write(\"List Name: \" + listName + \"<br>\");\n    //Write(\"List ID: \" + listID + \"<br>\");\n    listLidArray.push({\"ListID\": listID});\n  }\n  \nif(listLidArray.length > 0){\n  \n  for(var i = 0; i < listLidArray.length; i++){\n    var listID = listLidArray[i].ListID;\n    \n      \n    var req = api.retrieve(\"List\", [\"ListName\", \"Category\", \"ID\"], {\n    Property: \"ID\",\n    SimpleOperator: \"equals\",\n    Value: listID\n});\n\nvar list = [req.Results[0].ListName];\n    \n    \nvar listName = [req.Results[0].ListName];\nvar listId = [req.Results[0].ID];\n//Write(\"ListName: \" +list);\n//Write(\"List Id: \" +listId);\nvar id = req.Results[0].Category;\n\nwhile(id > 0) {\n\n    var req = api.retrieve(\"DataFolder\", [\"Name\",\"ParentFolder.ID\"], { \n        Property: \"ID\", \n        SimpleOperator: \"equals\", \n        Value: id \n    });\n    var DataFolderName = req.Results[0].Name;\n    list.unshift(req.Results[0].Name);\n    id = req.Results[0].ParentFolder.ID;\n  \n    var res = list.join(\" / \");\n    FinalListArray.push({\"ListID\": listId, \"ListName\":listName,\"DataFolder\":DataFolderName,\"ListPath\":res});\n  \n    \n}\n    \n}//for close\n}// if check close\n\nfor(var j = 0; j < FinalListArray.length; j++){\nWrite(\"ListID: \" +FinalListArray[j].ListID+ \" ListName: \" +FinalListArray[j].ListName+ \" DataFolder: \" +FinalListArray[j].DataFolder+ \" ListPath: \" +FinalListArray[j].ListPath);\n}\n</script>","contentType":"application/javascript","customerKey":"2a1d46fb-a79f-416c-a9eb-228042b9ca93"}}},"288123":{"issues":[{"type":"ENTITY_NOT_FOUND","level":"WARNING","sourceJobType":"PACKAGE","entity":{"entityType":"dataExtensions","retrievalProperty":"name","value":"CustomerData","parentPath":"$['code']:I70"},"entityParent":{"entityType":"codeResources","retrievalProperty":"id","value":288123,"parentPath":"root"},"depPath":[{"entityType":"codeResources","retrievalProperty":"id","value":288123,"parentPath":"root"}]}],"originID":"288123","originEID":"mch4s3mv5j6r7tyf5xqf8s0-y2wm","data":{"code":"<script runat=\"server\">\n     var rows = Platform.Function.DeleteData('CustomerData',['LastName'],['Smith']);\n</script>","collectionId":"{{mcpm#/entities/cloudPageCollections/407/data/collectionId}}","contentType":"application/javascript","cultureCode":"en-US","description":"","domain":"{{mcpm:cloudPages-domain}}","key":"deleterecords","name":"deleteRecordsForDE","requiresSsl":false,"url":"http://cloud.email-v2force.com/deleterecords","asset":{"assetType":{"id":240,"name":"jscoderesource"},"description":"","name":"deleteRecordsForDE","category":{"id":"{{mcpm#/entities/categories/9745/data/id}}","name":"Content Builder","parentId":0},"content":"<script runat=\"server\">\n     var rows = Platform.Function.DeleteData('CustomerData',['LastName'],['Smith']);\n</script>","contentType":"application/javascript","customerKey":"7c59a5f0-767a-4257-b9d8-142638822381"}}},"356134":{"issues":[],"originID":"356134","originEID":"mch4s3mv5j6r7tyf5xqf8s0-y2wm","data":{"code":"<script runat=\"server\">\n\n    Platform.Load(\"core\", \"1\");\n\n    var api = new Script.Util.WSProxy();\n\n try {\n\n        var customerKey = \"30683437-0751-4751-813C-735AEC86B505\";\n\n        var cols = [\n            \"Name\", \n            \"MaxLength\", \n            \"IsRequired\", \n            \"FieldType\", \n            \"DefaultValue\", \n            \"Ordinal\"\n        ];\n\n        var result = api.retrieve(\"DataExtensionField\", cols, {\n            Property: \"DataExtension.CustomerKey\",\n            SimpleOperator: \"equals\",\n            Value: customerKey\n        });\n\n        Write(Stringify(result));\n  \n } catch(error) {\n        Write(Stringify(error));\n    } \n\n</script>\n","collectionId":"{{mcpm#/entities/cloudPageCollections/407/data/collectionId}}","contentType":"application/javascript","cultureCode":"en-US","description":"","domain":"{{mcpm:cloudPages-domain}}","key":"stacktest","name":"getStackTest","requiresSsl":false,"url":"http://cloud.email-v2force.com/stacktest","asset":{"assetType":{"id":240,"name":"jscoderesource"},"description":"","name":"getStackTest","category":{"id":"{{mcpm#/entities/categories/9745/data/id}}","name":"Content Builder","parentId":0},"content":"<script runat=\"server\">\n\n    Platform.Load(\"core\", \"1\");\n\n    var api = new Script.Util.WSProxy();\n\n try {\n\n        var customerKey = \"30683437-0751-4751-813C-735AEC86B505\";\n\n        var cols = [\n            \"Name\", \n            \"MaxLength\", \n            \"IsRequired\", \n            \"FieldType\", \n            \"DefaultValue\", \n            \"Ordinal\"\n        ];\n\n        var result = api.retrieve(\"DataExtensionField\", cols, {\n            Property: \"DataExtension.CustomerKey\",\n            SimpleOperator: \"equals\",\n            Value: customerKey\n        });\n\n        Write(Stringify(result));\n  \n } catch(error) {\n        Write(Stringify(error));\n    } \n\n</script>\n","contentType":"application/javascript","customerKey":"2a710f26-73e7-4045-a7ba-962058156da7"}}}},"dataExtensions":{},"dataExtractActivities":{},"dataFilterDefinitions":{},"dataFilters":{},"eventDefinitions":{},"fileTransferActivities":{},"importActivities":{},"journeys":{},"journeyTemplates":{},"landingPages":{"246030-1584":{"issues":[],"originID":"246030-1584","originEID":"mch4s3mv5j6r7tyf5xqf8s0-y2wm","data":{"asset":{"assetType":{"id":205,"name":"webpage"},"name":"getDataExtenisonDetails (2)","category":{"id":"{{mcpm#/entities/categories/9745/data/id}}"},"contentType":"text/html","meta":{"globalStyles":{"isLocked":false,"body":{"max-width":"1280px"}}},"views":{"html":{"thumbnail":{},"content":"<!DOCTYPE html>\n<html>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<head><meta name=\"ROBOTS\" content=\"INDEX,FOLLOW\"><meta name=\"keywords\" content=\"\"><meta name=\"description\" content=\"\">\n<title>Form Submission</title>\n<style>\n/*#cover-spin {\n    position:fixed;\n    width:100%;\n    left:0;right:0;top:0;bottom:0;\n    background-color: rgba(255,255,255,0.7);\n    z-index:9999;\n    display:none;\n}*/\n  \n#cover-spin {\n    position: fixed;\n    width: 98%;\n    left: 15px;\n    height: 47%;\n    right: 0px;\n    top: 208px;\n    bottom: 0;\n    background-color: rgb(255 255 255 / 40%);\n    z-index: 9999;\n    display: none;\n}\n\n@-webkit-keyframes spin {\n from {-webkit-transform:rotate(0deg);}\n to {-webkit-transform:rotate(360deg);}\n}\n\n@keyframes spin {\n from {transform:rotate(0deg);}\n to {transform:rotate(360deg);}\n}\n\n#cover-spin::after {\n    content:'';\n    display:block;\n    position:absolute;\n    left:48%;top:40%;\n    width:40px;height:40px;\n    border-style:solid;\n    border-color:black;\n    border-top-color:transparent;\n    border-width: 4px;\n    border-radius:50%;\n    opacity: 5;\n    -webkit-animation: spin .8s linear infinite;\n    animation: spin .8s linear infinite;\n}\n  \n  \n#subscrber-update {\n    position:fixed;\n    width:100%;\n    left:0;right:0;top:0;bottom:0;\n    background-color: rgba(255,255,255,0.7);\n    z-index:9999;\n    display:none;\n}\n\n@-webkit-keyframes spin {\n from {-webkit-transform:rotate(0deg);}\n to {-webkit-transform:rotate(360deg);}\n}\n\n@keyframes spin {\n from {transform:rotate(0deg);}\n to {transform:rotate(360deg);}\n}\n\n#subscrber-update::after {\n    content:'';\n    display:block;\n    position:absolute;\n    left:48%;top:40%;\n    width:40px;height:40px;\n    border-style:solid;\n    border-color:black;\n    border-top-color:transparent;\n    border-width: 4px;\n    border-radius:50%;\n    opacity: 5;\n    -webkit-animation: spin .8s linear infinite;\n    animation: spin .8s linear infinite;\n}\n\n  \n input[type=email]{\n  width: 100%;\n  padding: 10px 10px;\n  margin: 0px 0;\n  display: inline-block;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  box-sizing: border-box;\n}\n  \n  select[class = \"select-rows\"]{\n      width: 100%;\n  padding: 10px 10px;\n  margin: 8px 0;\n  display: inline-block;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  box-sizing: border-box;\n  }\n  select[id = \"status-dropdown\"]{\n    font-weight: bold;\n    line-height: 18px;\n    color: #4e8abe;\n    text-shadow: none;\n    border: 1px solid #b5c6d2;\n    -webkit-box-shadow: 1px 1px 2px 0 rgba(0,0,0,0.15);\n    -moz-box-shadow: 1px 1px 2px 0 rgba(0,0,0,0.15);\n    box-shadow: 1px 1px 2px 0 rgba(0,0,0,0.15);\n  }\nbutton[type=submit] {\n    padding: 10px 12px 10px;\n    color: #fff;\n    text-shadow: none;\n    background-color: #7fb9ec;\n    background-color: #6ba6da;\n    *background-color: #7fb9ec;\n    background-image: -moz-linear-gradient(top,#7fb9ec,#4e8abe);\n    background-image: -webkit-gradient(linear,0 0,0 100%,from(#7fb9ec),to(#4e8abe));\n    background-image: -webkit-linear-gradient(top,#7fb9ec,#4e8abe);\n    background-image: -o-linear-gradient(top,#7fb9ec,#4e8abe);\n    background-image: linear-gradient(to bottom,#7fb9ec,#4e8abe);\n    background-repeat: repeat-x;\n    border-width: 0;\n    filter: progid:dximagetransform.microsoft.gradient(startColorstr='#ff7fb9ec',endColorstr='#ff4e8abe',GradientType=0);\n    filter: progid:dximagetransform.microsoft.gradient(enabled=false);\n}\nbutton[type=submit]:hover {\n  background-color: #4e8abe;\n  background-image: -moz-linear-gradient(top, #4e8abe, #7fb9ec);\n  background-image: -webkit-gradient(linear, 0 0, 0 100%, from(#4e8abe), to(#7fb9ec));\n  background-image: -webkit-linear-gradient(top, #4e8abe, #7fb9ec);\n  background-image: -o-linear-gradient(top, #4e8abe, #7fb9ec);\n  background-image: linear-gradient(to bottom, #4e8abe, #7fb9ec);\n}\n  \nbutton[id=changeStatus]{\n    padding: 5px 10px 5px;\n    color: #fff;\n    text-shadow: none;\n    background-color: #7fb9ec;\n    background-color: #6ba6da;\n    *background-color: #7fb9ec;\n    background-image: -moz-linear-gradient(top,#7fb9ec,#4e8abe);\n    background-image: -webkit-gradient(linear,0 0,0 100%,from(#7fb9ec),to(#4e8abe));\n    background-image: -webkit-linear-gradient(top,#7fb9ec,#4e8abe);\n    background-image: -o-linear-gradient(top,#7fb9ec,#4e8abe);\n    background-image: linear-gradient(to bottom,#7fb9ec,#4e8abe);\n    background-repeat: repeat-x;\n    border-width: 0;\n    filter: progid:dximagetransform.microsoft.gradient(startColorstr='#ff7fb9ec',endColorstr='#ff4e8abe',GradientType=0);\n    filter: progid:dximagetransform.microsoft.gradient(enabled=false);\n    width: 100px;\n}\n\nbutton[id=button1]{\n  padding: 5px 10px 5px;\n    font-weight: bold;\n    line-height: 18px;\n    color: #4e8abe;\n    text-shadow: none;\n    border: 1px solid #b5c6d2;\n    -webkit-box-shadow: 1px 1px 2px 0 rgba(0,0,0,0.15);\n    -moz-box-shadow: 1px 1px 2px 0 rgba(0,0,0,0.15);\n    box-shadow: 1px 1px 2px 0 rgba(0,0,0,0.15);\n    margin-top: 10px;\n }\nbody {font-family: Arial; \n       text-color: black;transform: scale(0.9);}\n#body-container{\n    padding: 0px;\n    font-size:15px;\n    margin-top: -25px;\n  }\n  \n  #table-search{\n    padding: 0px;\n    font-size:15px;\n  }\n  #table-content-main{\n    padding: 10px;\n  } \n/* tab css */\n.tab {\n  overflow: hidden;\n  border: 1px solid #ccc;\n  background-color: #f1f1f1;\n}\n\n/* Style the buttons inside the tab */\n.tab button {\n  background-color: inherit;\n  float: left;\n  border: none;\n  outline: none;\n  cursor: pointer;\n  padding: 11px 10px;\n  transition: 0.3s;\n  font-size: 17px;\n}\n\n/* Change background color of buttons on hover */\n.tab button:hover {\n  background-color: #ddd;\n}\n\n/* Create an active/current tablink class */\n.tab button.active {\n   z-index: 20;\n    color: #333333;\n    background: #f0f9fe;\n    background: -moz-linear-gradient(top, #f0f9fe 0%, #ffffff 65%);\n    background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#f0f9fe), color-stop(65%,#ffffff));\n    background: -webkit-linear-gradient(top, #f0f9fe 0%,#ffffff 65%);\n    background: -o-linear-gradient(top, #f0f9fe 0%,#ffffff 65%);\n    background: -ms-linear-gradient(top, #f0f9fe 0%,#ffffff 65%);\n    background: linear-gradient(to bottom, #f0f9fe 0%,#ffffff 65%);\n    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#f0f9fe', endColorstr='#ffffff',GradientType=0 );\n    cursor: default;\n}\n\n/* Style the tab content */\n.tabcontent {\n  display: none;\n  padding: 6px 12px;\n  border: 1px solid #ccc;\n  border-top: none;\n}\n  \n  \n.toast {\n  visibility: hidden;\n  position: fixed;\n  bottom: 0;\n  left: 50%;\n  transform: translateX(-50%);\n  background-color: #333;\n  color: #fff;\n  text-align: center;\n  border-radius: 10px;\n  padding: 16px;\n  z-index: 1;\n}\n\n.toast.show {\n  visibility: visible;\n  animation: fadein 0.5s, fadeout 0.5s 2.5s;\n}\n\n@keyframes fadein {\n  from {bottom: 0; opacity: 0;}\n  to {bottom: 30px; opacity: 1;}\n}\n\n@keyframes fadeout {\n  from {bottom: 30px; opacity: 1;}\n  to {bottom: 0; opacity: 0;}\n}\n  \n#snackbar {\n    visibility: hidden;\n    width: 424px;\n    margin-left: -100px;\n    background-color: #333;\n    color: #fff;\n    text-align: center;\n    border-radius: 2px;\n    padding: 16px;\n    position: fixed;\n    z-index: 1;\n    left: 50%;\n    top: 7%;\n    transform: translate(-32%, -50%);\n    font-size: 13px;\n}\n\n#snackbar.show {\n  visibility: visible;\n}\n\n\n.pagination {\n  width:140px;\n  margin-top: 10px;\n  margin-bottom: 20px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  font-size: 14px;\n}\n\n.pagination button {\n  border: none;\n  background-color: transparent;\n  color: #007bff;\n  cursor: pointer;\n}\n\n.pagination select {\n  margin-right: 10px;\n}\n.table-wrapper {\n  height: 300px; /* Set the height you want for the tbody */\n  overflow-y: auto; /* Enable vertical scrolling */\n  width: 100%;\n}\n\ntable {\n  border-collapse: collapse;\n  width: 100%;\n  text-align: center;\n  margin: 0 auto;\n}\n\nthead th {\n  background-color: #ddd;\n  font-weight: bold;\n  position: sticky;\n  top: 0;\n  padding: 10px;\n  border: 1px solid #ddd;\n  background-color: #f2f2f2;\n  text-align: center;\n}\n\ntbody tr {\n  border-bottom: 1px solid #ddd;\n}\n  \ntbody td {\n    padding: 8px;\n    text-align: center;\n    padding: 12px;\n    border: 2px solid #ddd;\n}\ntr:nth-child(even) {\n  background-color: #f2f2f2;\n}\n.search-box {\n    padding: 5px;\n    width: 284px;\n    float: right;\n    margin-top: 11px;\n}\n.search-box-list {\n    padding: 5px;\n    width: 284px;\n}\n</style>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\">\n</head>\n<body>\n<div id = \"body-container\">\n<input type=\"email\" id=\"name\" name=\"email\" placeholder=\"Enter Subscriber Email Address\" required style = \"width:30%\">\n<button type=\"Submit\" id = \"submit\">Get Records</button><span id=\"error-message\" style=\"color:red\"></span><br>\n<div id=\"cover-spin\" style=\"display: none;\"></div> \n<div id =\"snackbar\"></div>\n   <div style = \"margin-bottom:5px;\">Click on the buttons inside the tabbed content for Searching Email Address\n    <strong><p id=\"contnetSearch\" style = \"display: inline-block;\"></p></strong>\n  </div>\n<!--<div id=\"subscriber\" ></div>\n<div id=\"deleteRecord\" ></div>\n<div id=\"results\" ></div>-->\n<div id = \"table-search\"> \n<div class=\"tab\">\n  <button class=\"tablinks\" onclick=\"openCity(event, 'getDataExtension')\"><strong>Data Extension Details</strong></button>\n  <button id=\"subscriberDetails\" class=\"tablinks\" onclick=\"openCity(event, 'getSubscriberDetails')\"><strong>Subscriber Lists Details</strong></button>\n</div>\n\n<div id=\"getDataExtension\" class=\"tabcontent\" style = \"display:block;\">\n<div id = \"table-content-main\"> \n<div id=\"deleteRecordButton\">\n  <button id = \"button1\" class=\"\" disabled = \"true\" onClick = \"deleteRecord()\">\n     Delete Record\n  </button>\n  <input id = \"search-data-extensionFilter\" class  = \"search-box\" placeholder = \"Filter a subscriber by searching....\">\n</div>\n<br>\n<div class=\"table-wrapper\">\n  <table id=\"my-table\">\n    <thead>\n      <tr>\n        <th><input type=\"checkbox\" id=\"selectAll\" /></th>\n        <th>Subscriber Key</th>\n        <th>Data Extension Name</th>\n        <th>Data Extension Key</th>\n        <th>Data Extension Path</th>\n      </tr>\n    </thead>\n    <tbody>\n      <!-- Add your table data here -->\n    </tbody>\n  </table>\n</div>\n<div id= \"data-extension_Pagination\" style = \"display:block;\">\n<div class=\"pagination\">\n  <select id=\"rowsPerPage\" class = \"select-rows\">\n    <option value=\"10\">10</option>\n    <option value=\"50\">50</option>\n    <option value=\"100\">100</option>\n    <option value=\"200\">200</option>\n    <option value=\"All\" selected>All</option>\n  </select>\n</div>\n  <span id=\"currentPage\"></span>\n  <button id=\"prevPage\"><i class=\"fa fa-angle-left\"></i></button>\n  <button id=\"nextPage\"><i class=\"fa fa-angle-right\"></i></button>\n</div>\n</div>\n</div>\n\n  \n<div id=\"getSubscriberDetails\" class=\"tabcontent\">\n<div id = \"table-content-main\">\n  <div><input id = \"listFilter-search\" class =\"search-box-list\" placeholder = \"Filter a subscriber by searching....\"></div><br>\n<div class=\"table-wrapper\">\n<table id = \"subscriber-table\">\n    <thead>\n       <th>Subscriber Key</th>\n       <th>List ID</th>\n       <th>List Name</th>\n       <th>Folder Name</th>\n       <th>List Path</th>\n       <th>Status\n            <select id=\"status-select\">\n                <option values=\"All\" selected>All</option>\n                <option values=\"Active\">Active</option>\n                <option values=\"Unsubscribed\">Unsubscribed</option>\n                <option values=\"Bounced\">Bounced</option>\n                <option values=\"Held\">Held</option>\n            </select></th>\n       <th>Subscribe/Unsubscribe</th>\n    </thead>\n    <tbody>\n    </tbody>\n</table>\n</div>\n<div style = \"display: inline-block;\">\n<div class=\"pagination\">\n  <select id=\"subscriber-rows\" class = \"select-rows\">\n    <option value=\"10\">10</option>\n    <option value=\"50\">50</option>\n    <option value=\"100\">100</option>\n    <option value=\"200\">200</option>\n    <option value=\"All\" selected>All</option>\n  </select>\n</div>\n  <span id=\"subscriber-currentPage\"></span>\n  <button id=\"subscriber-prevPage\"><i class=\"fa fa-angle-left\"></i></button>\n  <button id=\"subscriber-nextPage\"><i class=\"fa fa-angle-right\"></i></button>\n</div>\n</div>\n</div> \n</div>  \n</div> \n<!--<div id=\"subscriberData\"><div id=\"cover-spin\" style=\"display: none;\"></div></div><br>\n<br>\n<br><br> -->\n  \n \n<script>\n//handle tab\nfunction openCity(evt, cityName) {\n  var i, tabcontent, tablinks;\n  tabcontent = document.getElementsByClassName(\"tabcontent\");\n  for (i = 0; i < tabcontent.length; i++) {\n    tabcontent[i].style.display = \"none\";\n  }\n  tablinks = document.getElementsByClassName(\"tablinks\");\n  for (i = 0; i < tablinks.length; i++) {\n    tablinks[i].className = tablinks[i].className.replace(\" active\", \"\");\n  }\n  document.getElementById(cityName).style.display = \"block\";\n  evt.currentTarget.className += \" active\";\n}\ndocument.getElementsByClassName(\"tablinks\")[0].click();  \n  \n// call the \"getSubscriberDetails Function when i clicked on \"All Subscriber Tab\"\"\ndocument.getElementById(\"subscriberDetails\").addEventListener(\"click\", function() {\n  var evt = new MouseEvent(\"click\");\n  getSubscriberDetails();\n  //var section = document.getElementById(\"table-search\");\n  //section.scrollIntoView();\n  const selectValue = document.querySelector('#status-select');\n  selectValue.value = \"All\";\n  \n  const searchFilterInput = document.querySelector('#listFilter-search');\n  searchFilterInput.value = '';\n  \n});\n\n  \n// Get the file input element and add an event listener to detect when a file is selected\nvar clickButton = document.getElementById('submit');\nclickButton.addEventListener('click', handleFileInput);\n//clearTable(\"my-table\");\n  \n//check valid email\nfunction checkEmail() {\n  var emailInput = document.getElementById(\"name\");\n  var errorMessage = document.getElementById(\"error-message\");\n  var email = emailInput.value;\n  var emailRegex = /\\S+@\\S+\\.\\S+/;\n\n  if (!emailRegex.test(email)) {\n    errorMessage.textContent = \"Please enter a valid email address\";\n    emailInput.style.border = \"1px solid red\";\n    return false;\n  } else {\n    errorMessage.textContent = \"\";\n    emailInput.style.border = \"\";\n    return true;\n  }\n}\n  \nfunction handleFileInput (){\n    alert(\"Get Record\");\n    var emailInput = document.getElementById('name').value;\n    if(emailInput == \"\"){\n      alert(\"Please Enter Email Address\");\n       }\n    else{\n    var checkEmailResponse = checkEmail();\n     if(checkEmailResponse){\n            document.getElementsByClassName(\"tablinks\")[0].click();\n            var DataExtensionTable = document.querySelector('#my-table tbody');\n            DataExtensionTable.innerHTML = '';\n            var ListTable = document.querySelector('#subscriber-table tbody');\n            ListTable.innerHTML = '';\n            var emailInput = document.getElementById('name').value;\n            var contentSearch = document.querySelector('#contnetSearch');\n            contentSearch.innerHTML = emailInput;\n            //getSubscriberDetails();\n            uncheckAllCheckboxes();\n            reteriveRecords(emailInput);\n            //var section = document.getElementById(\"table-search\");\n            //section.scrollIntoView();\n       \n        }\n\n    } \n}\n\nfunction reteriveRecords(emailInput){\n         \n    const loading = document.getElementById('cover-spin');\n          loading.style.display = 'block';\n          //results.innerHTML = '';\n    const searchFilterDataExtension = document.querySelector('#search-data-extensionFilter');\n    searchFilterDataExtension.value = '';\n    const xhttp = new XMLHttpRequest();\n            var scatterSeries = [];\n            xhttp.onreadystatechange = function() {\n             if (this.readyState === 4) {\n                    loading.style.display = 'none';\n                    //loggedIn.style.display = 'block';\n                  \n                    if (this.status === 200) {\n                        //results.innerHTML = this.responseText;\n                                            //table.innerHTML = '';\n                      /*var div = document.querySelector('#deleteRecordButton');\n                      div.innerHTML = '';\n                      var tablehead = document.querySelector('#my-table thead');\n                      table.innerHTML = '';\n                      var table = document.querySelector('#my-table tbody');\n                      table.innerHTML = '';\n                      var data = JSON.parse(this.responseText);  */\n                      var data = JSON.parse(this.responseText);\n                      \n                      if (data.length > 0) {\n                      // assuming that data is an array of objects with properties DataExtensionName, DataExtensionKey, URL, and DataExtensionPath\n                      var table = document.querySelector('#my-table tbody');\n                      table.innerHTML = '';\n          \n                      for (var i = 0; i < data.length; i++) {\n                        var table = document.querySelector('#my-table tbody');\n                        var row = document.createElement('tr');\n\n                        var checkbox = document.createElement('td');\n                        checkbox.innerHTML = '<input type=\"checkbox\" onchange=\"handleCheckboxChange(this)\">';\n                        checkbox.style.display = \"text-align: center\";\n                        \n                        var subkey = document.createElement('td');\n                        subkey.textContent = data[i].SubscriberKey;\n                        \n                        var name = document.createElement('td');\n                        name.textContent = data[i].DataExtensionName;\n\n                        var key = document.createElement('td');\n                        key.textContent = data[i].DataExtensionKey;\n\n                        var path = document.createElement('td');\n                        var link = document.createElement('a');\n                        link.textContent = data[i].DataExtensionPath;\n                        link.href = data[i].URL;\n                        link.target = '_blank';\n                        path.appendChild(link);\n                        \n                        \n\n                        row.appendChild(checkbox);\n                        row.appendChild(subkey);\n                        row.appendChild(name);\n                        row.appendChild(key);\n                        row.appendChild(path);\n                        \n\n                        table.appendChild(row);\n                        \n                     }\n                      \n                  } else {\n                      var table = document.querySelector('#my-table tbody');\n                      table.innerHTML = '';\n                      var toast = document.getElementById(\"snackbar\");\n                      toast.innerHTML = \"No Data Found For This Subscriber.\";\n                      toast.className = \"show\";\n                      toast.style.backgroundColor = \"#a91212\";\n                      setTimeout(function(){\n                        toast.className = toast.className.replace(\"show\", \"\");\n                      }, 6000);\n                      //results.innerHTML = '<p>No data found for subscriber.</p>';\n                  }\n                   } else {\n                      var toast = document.getElementById(\"snackbar\");\n                      toast.innerHTML =  \"Error: \" + this.status + \" Reload Again !\" + this.statusText;\n                      toast.className = \"show\";\n                      toast.style.backgroundColor = \"#a91212\";\n                      setTimeout(function(){\n                        toast.className = toast.className.replace(\"show\", \"\");\n                      }, 10000);\n                        //results.innerHTML = \"Error: \" + this.status + \" \" + this.statusText;\n                    }\n                }\n            };\n            xhttp.open('POST', 'https://cloud.email-v2force.com/getRecords', true);\n            xhttp.setRequestHeader('Content-Type', 'application/json');\n            xhttp.send(JSON.stringify({\"Email\": emailInput }));\n  \n         \n            //pagination code start for data extension table\n            const dataExtnesionPagination = document.querySelector('#data-extension_Pagination');\n            dataExtnesionPagination.style.display = \"block\";\n            const table1 = document.querySelector('#my-table');\n            const select1 = document.querySelector('#rowsPerPage');\n            select1.value = \"All\";\n            const prevBtn1 = document.querySelector('#prevPage');\n            const nextBtn1 = document.querySelector('#nextPage');\n            const currentPage1 = document.querySelector('#currentPage');\n            const searchFilter1 = document.querySelector('#search-data-extensionFilter');\n            setupPagination(table1, select1, prevBtn1, nextBtn1, currentPage1,searchFilter1);\n            //pagination code start for data extension table end\n}\n\n \nfunction getSubscriberDetails(){\n    //alert(\"your Email\" +emailInput);\n    const loading = document.getElementById('cover-spin');\n    loading.style.display = 'block';\n  \n    const selectValue = document.querySelector('#status-select');\n    selectValue.value = \"All\";\n\n    const searchFilterInput = document.querySelector('#listFilter-search');\n    searchFilterInput.value = '';\n  \n    var table = document.querySelector('#subscriber-table tbody');\n                      // assuming that data is an array of objects with properties DataExtensionName, DataExtensionKey, URL, and DataExtensionPath\n    table.innerHTML = '';\n  \n    var emailInput = document.getElementById('contnetSearch').innerHTML;\n    const xhttp = new XMLHttpRequest();\n            var scatterSeries = [];\n            xhttp.onreadystatechange = function() {\n             if (this.readyState === 4) {\n                   \n                    if (this.status === 200) {\n                         loading.style.display = 'none';\n                        //var div = document.querySelector('#subscriberData');\n                        //div.innerHTML = \"\";\n                        //subscriber.innerHTML = this.responseText;\n                        var data = JSON.parse(this.responseText);\n                        \n                        \n                    if (data.length > 0) {\n                      var table = document.querySelector('#subscriber-table tbody');\n                      // assuming that data is an array of objects with properties DataExtensionName, DataExtensionKey, URL, and DataExtensionPath\n                      table.innerHTML = '';\n                      for (var i = 0; i < data.length; i++) {\n                        var table = document.querySelector('#subscriber-table tbody');\n                        var row = document.createElement('tr');\n                        \n                        var subscriberKey = document.createElement('td');\n                        subscriberKey.textContent = data[i].SubscriberKey;\n                        \n                        var ListID = document.createElement('td');\n                        ListID.textContent = data[i].ListID;\n                        \n                        var ListName = document.createElement('td');\n                        ListName.textContent = data[i].ListName;\n                        \n                        var DataFolder = document.createElement('td');\n                        DataFolder.textContent = data[i].DataFolder;\n                        DataFolder.style.textTransform = \"capitalize\";\n                        \n                        var ListPath = document.createElement('td');\n                        ListPath.textContent = data[i].ListPath;\n                        ListPath.style.textTransform = \"capitalize\";\n                        \n                        var Status = document.createElement('td');\n                        Status.classList.add('status');\n                        Status.textContent = data[i].Status; \n                        \n                        if(data[i].Status == \"Active\"){\n                          var changeStatus = document.createElement('td');\n                          changeStatus.style.textAlign = \"center\";\n                          var button = document.createElement('button');\n                          button.textContent = 'Unsubscribe';\n                          button.id = \"changeStatus\";\n                          //button.name = Status;\n                          //button.class = \"changeStatus\";\n                          button.addEventListener('click', UpdateStatus);\n                          //subscriberKey.textContent = data[i].SubscriberKey;\n                          changeStatus.appendChild(button);\n                        }\n                        else if(data[i].Status == \"Unsubscribed\"){\n                          var changeStatus = document.createElement('td');\n                          changeStatus.style.textAlign = \"center\";\n                          var button = document.createElement('button');\n                          button.textContent = 'Active';\n                          //button.id = subscriberKey;\n                          //button.name = Status;\n                          button.id = \"changeStatus\";\n                          //button.class = \"changeStatus\";\n                          button.addEventListener('click', UpdateStatus);\n                          //subscriberKey.textContent = data[i].SubscriberKey;\n                          changeStatus.appendChild(button);\n                        }\n                        else if(data[i].Status == \"Bounced\"){\n                          var changeStatus = document.createElement('td');\n                          changeStatus.style.textAlign = \"center\";\n                          var button = document.createElement('button');\n                          button.textContent = 'Unsubscribe';\n                          //button.id = subscriberKey;\n                          //button.name = Status;\n                          button.id = \"changeStatus\";\n                          //button.class = \"changeStatus\";\n                          button.addEventListener('click', UpdateStatus);\n                          //subscriberKey.textContent = data[i].SubscriberKey;\n                          changeStatus.appendChild(button);\n                        }\n                        else if(data[i].Status == \"Held\"){\n                          var changeStatus = document.createElement('td');\n                          changeStatus.style.textAlign = \"center\";\n                          var button = document.createElement('button');\n                          button.textContent = 'Unsubscribe';\n                          //button.id = subscriberKey;\n                          //button.name = Status;\n                          //button.class = \"changeStatus\";\n                          button.id = \"changeStatus\";\n                          button.addEventListener('click', UpdateStatus);\n                          //subscriberKey.textContent = data[i].SubscriberKey;\n                          changeStatus.appendChild(button);\n                        }\n                        else if(data[i].Status == \"Deleted\"){\n                          var changeStatus = document.createElement('td');\n                          changeStatus.style.textAlign = \"center\";\n                          var button = document.createElement('button');\n                          button.textContent = 'Unsubscribe';\n                          //button.id = subscriberKey;\n                          //button.name = Status;\n                          //button.class = \"changeStatus\";\n                          button.id = \"changeStatus\";\n                          button.addEventListener('click', UpdateStatus);\n                          //subscriberKey.textContent = data[i].SubscriberKey;\n                          changeStatus.appendChild(button);\n                        }\n                        else{\n                        }\n                        \n                        row.appendChild(subscriberKey);\n                        row.appendChild(ListID);\n                        row.appendChild(ListName);\n                        row.appendChild(DataFolder);\n                        row.appendChild(ListPath);\n                        row.appendChild(Status);\n                        row.appendChild(changeStatus);\n                        \n                        table.appendChild(row);\n\n                      }\n                 \n                    /*for (var i = 0; i < data.length; i++) {\n                      //var status = data[\"Status\"];\n                      //var emailAddress = data[\"EmailAddress\"];\n                      var subscriberKey = data[i].SubscriberKey;\n                      console.log(\"SubscriberKey\" +subscriberKey);\n                      \n                      var Status = data[i].Status;\n                      console.log(\"Status\" +Status);\n                      \n                     }*/\n                  } else {\n                      var table = document.querySelector('#subscriber-table tbody');\n                      // assuming that data is an array of objects with properties DataExtensionName, DataExtensionKey, URL, and DataExtensionPath\n                      table.innerHTML = '';\n                    \n                      //var table = document.querySelector('#my-table tbody');\n                      //table.innerHTML = '';\n                      var toast = document.getElementById(\"snackbar\");\n                      toast.innerHTML = \"Subscriber Not Exit In Any List List\";\n                      toast.className = \"show\";\n                      toast.style.backgroundColor = \"#a91212\";\n                      setTimeout(function(){\n                        toast.className = toast.className.replace(\"show\", \"\");\n                      }, 10000);\n                    \n                      //results.innerHTML = '<p> subscriber not exit in all sub.</p>';\n                  }\n                   } else {\n                        var toast = document.getElementById(\"snackbar\");\n                        toast.innerHTML = \"Error: \" + this.status + \" Please Try Again ! \" + this.statusText;\n                        toast.className = \"show\";\n                        toast.style.backgroundColor = \"#a91212\";\n                        setTimeout(function(){\n                        toast.className = toast.className.replace(\"show\", \"\");\n                        }, 10000);\n                        //results.innerHTML = \"Error: \" + this.status + \" \" + this.statusText;\n                    }\n                }\n            };\n            xhttp.open('POST', 'https://cloud.email-v2force.com/allSubscriberlist', true);\n            xhttp.setRequestHeader('Content-Type', 'application/json');\n            xhttp.send(JSON.stringify({\"Email\": emailInput }));\n  \n  \n  // list table pagination\nconst table2 = document.querySelector('#subscriber-table');\nconst select2 = document.querySelector('#subscriber-rows');\nselect2.value = \"All\";\nconst prevBtn2 = document.querySelector('#subscriber-prevPage');\nconst nextBtn2 = document.querySelector('#subscriber-nextPage');\nconst currentPage2 = document.querySelector('#subscriber-currentPage');\nconst searchFilter2 = document.querySelector('#listFilter-search');\nsetupPagination(table2, select2, prevBtn2, nextBtn2, currentPage2, searchFilter2);\n// list table pagination end\n}\n\n \n\nfunction setupPagination(table, select, prevBtn, nextBtn, currentPage, searchInput) {\n  const tbody = table.querySelector('tbody');\n  let rowsPerPage = select.value;\n  let currentPageNum = 1;\n  let searchQuery = '';\n  let statusFilter = 'All';\n  //currentPage.textContent = `Page ${currentPageNum} of 1`;\n  // Function to display rows based on current page number, rows per page, and search query\nfunction displayRows() {\n  const rows = tbody.querySelectorAll('tr');\n  let filteredRows = [];\n  const firstRow = (currentPageNum - 1) * rowsPerPage;\n  const lastRow = firstRow + rowsPerPage - 1;\n  \n  rows.forEach((row, index) => {\n    let status = '';\n      const statusEl = row.querySelector('.status');\n      if (statusEl) {\n        status = statusEl.textContent;\n      }\n    \n    if (select.value === 'All' && (searchQuery === '' || row.textContent.toLowerCase().includes(searchQuery)) && (statusFilter === 'All' || status === statusFilter)) {\n      row.style.display = 'table-row';\n    } else if (index >= firstRow && index <= lastRow && searchQuery === '' && statusFilter === 'All') {\n      row.style.display = 'table-row';\n      console.log(\"1\");\n    } else if (index >= firstRow && index <= lastRow && select.value !== 'All') {\n      if ((searchQuery === '' || row.textContent.toLowerCase().includes(searchQuery)) && (statusFilter === 'All' || status === statusFilter)) {\n          select.value = \"All\";\n          row.style.display = 'table-row';\n      } else {\n          row.style.display = 'none';\n      }\n    } else {\n      row.style.display = 'none';\n    }\n  });\n\n  if(select.value === 'All'){\n      currentPage.textContent = `Page ${currentPageNum} of 1`;\n     }\n  else{\n    currentPage.textContent = `Page ${currentPageNum} of ${Math.ceil(rows.length / rowsPerPage)}`;\n  }\n  if (select.value === 'All') {\n    prevBtn.disabled = true;\n    nextBtn.disabled = true;\n  } else {\n    prevBtn.disabled = false;\n    nextBtn.disabled = false;\n  }\n}\n  // Initial display of rows\n  displayRows();\n\n  // Event listener for rows per page select\n  select.addEventListener('change', () => {\n    if (select.value === 'All' || select.value === '') {\n      rowsPerPage = tbody.querySelectorAll('tr').length;\n    } else {\n      rowsPerPage = parseInt(select.value);\n    }\n    currentPageNum = 1;\n    displayRows();\n  });\n\n  // Event listener for previous button\n  prevBtn.addEventListener('click', () => {\n    if (currentPageNum > 1) {\n      currentPageNum--;\n       uncheckAllCheckboxes();\n      displayRows();\n    }\n  });\n\n  // Event listener for next button\n  nextBtn.addEventListener('click', () => {\n    const rows = tbody.querySelectorAll('tr');\n    const lastPage = Math.ceil(rows.length / rowsPerPage);\n    if (currentPageNum < lastPage) {\n      currentPageNum++;\n       uncheckAllCheckboxes();\n      displayRows();\n    }\n  });\n\n  // Event listener for search input\n  searchInput.addEventListener('input', () => {\n    searchQuery = searchInput.value.toLowerCase();\n    currentPageNum = 1;\n    displayRows();\n  });\n  \n  // Event listener for status filter\n  const statusFilterInput = document.querySelector('#status-select');\n  statusFilterInput.addEventListener('change', () => {\n    statusFilter = statusFilterInput.value;\n    currentPageNum = 1;\n    displayRows();\n  });\n}\n\n// Call the function for each table\nfunction uncheckAllCheckboxes() {\n  const table = document.querySelector('#my-table');\n  const checkboxes = table.querySelectorAll('input[type=\"checkbox\"]');\n  checkboxes.forEach((checkbox) => {\n    checkbox.checked = false;\n    handleCheckboxChange(checkbox);\n  });\n  selectedRows = [];\n  document.querySelector(\"#button1\").disabled = true;\n}\n\n// Call the function for each table\nfunction uncheckAllCheckboxes() {\n  const table = document.querySelector('#my-table');\n  const checkboxes = table.querySelectorAll('input[type=\"checkbox\"]');\n  checkboxes.forEach((checkbox) => {\n    checkbox.checked = false;\n    handleCheckboxChange(checkbox);\n  });\n  selectedRows = [];\n  document.querySelector(\"#button1\").disabled = true;\n}\n\n// selet table rows ...........>\nlet selectedRows = [];\n\nfunction handleCheckboxChange(checkbox) {\n  const row = checkbox.parentNode.parentNode;\n  const subKeyValue = row.children[1].textContent.trim();\n  const firstValueTrim = row.children[2].textContent.trim();\n  const secondValueTrim = row.children[3].textContent.trim();\n\n  const rowValues = [subKeyValue, firstValueTrim, secondValueTrim];\n\n  if (document.querySelector(\"#selectAll\").checked) {\n    if (checkbox.checked) {\n      selectedRows.push(rowValues);\n    } else {\n      selectedRows = selectedRows.filter(row => row[0] !== subKeyValue);\n    }\n  } else {\n    const checkboxes = document.querySelectorAll(\"tbody tr:not([style*='none']) input[type='checkbox']:checked\");\n    selectedRows = [];\n    checkboxes.forEach((checkbox) => {\n      const row = checkbox.parentNode.parentNode;\n      const subKeyValue = row.children[1].textContent.trim();\n      const firstValueTrim = row.children[2].textContent.trim();\n      const secondValueTrim = row.children[3].textContent.trim();\n      const rowValues = [subKeyValue, firstValueTrim, secondValueTrim];\n      selectedRows.push(rowValues);\n    });\n  }\n\n  console.log(selectedRows);\n\n  if (selectedRows.length > 0) {\n    document.querySelector(\"#button1\").disabled = false;\n  } else {\n    document.querySelector(\"#button1\").disabled = true;\n  }\n}\n\nconst selectAllCheckbox = document.querySelector(\"#selectAll\");\nselectAllCheckbox.addEventListener(\"change\", function () {\n  const checkboxes = document.querySelectorAll(\"tbody tr:not([style*='none']) input[type='checkbox']\");\n  if (selectAllCheckbox.checked) {\n    selectedRows = [];\n    checkboxes.forEach((checkbox) => {\n      checkbox.checked = true;\n      handleCheckboxChange(checkbox);\n    });\n  } else {\n    checkboxes.forEach((checkbox) => {\n      checkbox.checked = false;\n      handleCheckboxChange(checkbox);\n    });\n    selectedRows = [];\n    document.querySelector(\"#button1\").disabled = true;\n  }\n});\n  \n// delete functionality....................> \nfunction deleteRecord(){\n        const loading = document.getElementById('cover-spin');\n        loading.style.display = 'block';\n        var conigJSON = {\n        \"SelectedDE\" : selectedRows,\n        \"EmailAddress\": document.getElementById(\"contnetSearch\").innerHTML\n      }\n      var okToRefresh = confirm(\"Delete All The Records For Selected Data Extension Based On Search Email Address ? \");\n      if(okToRefresh){\n         if(selectedRows.length == 0){\n              alert(\"Please Select Any Row From The Table Which You Want To Delete !\");\n              const loading = document.getElementById('cover-spin');\n              loading.style.display = 'none';\n            }\n         else{\n           var deleteRecord = selectedDEDelete(conigJSON);\n         }\n      }\n      else{\n        const loading = document.getElementById('cover-spin');\n        loading.style.display = 'none';\n      }\n}\n/*\nfunction selectedDEDelete(conigJSON){\n  \n          return new Promise(function(resolve, reject) {\n        const xhr = new XMLHttpRequest();\n        xhr.timeout = 30 * 1000;\n        xhr.open('POST', 'https://cloud.email-v2force.com/deleteRecord', true);\n        xhr.setRequestHeader('Content-type', 'application/json');\n        xhr.onload = () => {\n            if (xhr.status === 0 || (xhr.status >= 200 && xhr.status < 400)) {\n                resolve(JSON.parse(xhr.response))\n            } else {\n                reject(xhr.status)\n            }\n          return xhr.response;\n        }\n        xhr.onerror = () => {\n            if (debugging) console.log('Connection Error')\n        }\n        xhr.ontimeout = () => {\n            if (debugging) console.log('Request Timed Out')\n        };\n        xhr.send(JSON.stringify(conigJSON));\n    })  \n}*/\n  \nfunction selectedDEDelete(conigJSON){\n            const xhttp = new XMLHttpRequest();\n            var scatterSeries = [];\n            xhttp.onreadystatechange = function() {\n             if (this.readyState === 4) {\n                    //const loading = document.getElementById('cover-spin');\n                    //loading.style.display = 'none';\n                    if (this.status === 200) {\n                        //deleteRecord.innerHTML = this.responseText;\n                        var data = JSON.parse(this.responseText);\n                        //var emailInput = document.getElementById('contnetSearch').innerHTML;\n                        //reteriveRecords(emailInput);\n                        console.log(data);\n                        const loading = document.getElementById('cover-spin');\n                        loading.style.display = 'none';\n                    if (data) {\n                            const tableRows = document.querySelectorAll(\"#my-table tbody tr\");\n                              tableRows.forEach((row) => {\n                                const subKeyValu = row.children[1].textContent;\n                                if (data.some(obj => obj.SubscriberKey === subKeyValu && obj.Status === \"OK\")) {\n                                  row.remove();\n                                }\n                              });\n                           const allObjectsOK = data.every(obj => obj.Status === \"OK\");\n                           if (allObjectsOK) {\n                              // display toast message for all OK\n                              var toast = document.getElementById(\"snackbar\");\n                              toast.innerHTML = \"Subscriber Records Deleted From The Selected Data Extensions\";\n                              toast.className = \"show\";\n                              toast.style.backgroundColor = \"#49932e\";\n                              setTimeout(function(){\n                                toast.className = toast.className.replace(\"show\", \"\");\n                              }, 10000);\n                             var emailInput = document.getElementById('contnetSearch').innerHTML;\n                             //reteriveRecords(emailInput);\n                            } else {\n                              const notOKObj = data.find(obj => obj.Status !== \"OK\");\n                              // display toast message for not OK object\n                              var toast = document.getElementById(\"snackbar\");\n                              toast.innerHTML = `Data Extenison: ${notOKObj.DataExtensionName} Record Not Deleted. Please Check Again`;          toast.style.backgroundColor = \"#a91212\";\n                              toast.className = \"show\";\n                              setTimeout(function(){\n                                toast.className = toast.className.replace(\"show\", \"\");\n                              }, 10000);\n                              //console.log(`Object with ID ${notOKObj.DataExtensionName} has status ${notOKObj.status}`);\n                            }\n                      \n                  } else {\n                      var toast = document.getElementById(\"snackbar\");\n                      toast.innerHTML = \"No Subscriber Records Deleted Please Check Data Extension Must Contains EmailAddress, SubscriberKey Attributes\";\n                      toast.className = \"show\";\n                      toast.style.backgroundColor = \"#a91212\";\n                      setTimeout(function(){\n                        toast.className = toast.className.replace(\"show\", \"\");\n                      }, 10000);\n                  }\n                   } else {\n                        var toast = document.getElementById(\"snackbar\");\n                        toast.innerHTML =  \"Error: \" + this.status + \" Please Reload Page Again ! \" + this.statusText;; \n                        toast.className = \"show\";\n                        toast.style.backgroundColor = \"#a91212\";\n                        setTimeout(function(){\n                          toast.className = toast.className.replace(\"show\", \"\");\n                        }, 10000);\n                     \n                    }\n                }\n            };\n            xhttp.open('POST', 'https://cloud.email-v2force.com/deleteSubscriberDataRecord', true);\n            xhttp.setRequestHeader('Content-Type', 'application/json');\n            xhttp.send(JSON.stringify(conigJSON));\n}\n  \n// subscriberStatusUpdate\nfunction UpdateStatus(){\n  \n  var btn = window.event.target;\n  // Get the row containing the button that was clicked\n  var row = btn.parentNode.parentNode;\n\n  // Get the values of each column in the row\n  var subscriber = row.cells[0].innerHTML;\n  const subscriberKey = subscriber.trim();\n  \n  var listId = row.cells[1].innerHTML;\n  const ListID = listId.trim();\n  \n  var listName = row.cells[2].innerHTML;\n  const ListName = listName.trim();\n  \n  var dataFolder = row.cells[3].innerHTML;\n  const DataFolder = dataFolder.trim();\n  \n  var status = row.cells[5].innerHTML;\n  const getStatus = status.trim();\n\n  if(getStatus == \"Unsubscribed\" && ListName != \"All Subscribers\"){\n        \n          const objStatusUpdate = {\n              \"SubscriberKey\": subscriberKey,\n              \"ListID\":ListID,\n              \"ListName\":ListName,\n              \"Folder\":DataFolder,\n              \"Status\": getStatus\n           };\n    \n         var okToRefresh = confirm(\" IF You Want To Active this Subscriber. It will autometically get Active From ALL Subscriber List. \");\n         if(okToRefresh){\n              requestForStatusUpdate(objStatusUpdate);\n            }\n     }\n  else{\n         const objStatusUpdate = {\n              \"SubscriberKey\": subscriberKey,\n              \"ListID\":ListID,\n              \"ListName\":ListName,\n              \"Folder\":DataFolder,\n              \"Status\": getStatus\n           };\n         var okToRefresh = confirm(\"Do you really want to change the \"+objStatusUpdate[\"SubscriberKey\"]+\" status ?\");\n             if(okToRefresh){\n                  requestForStatusUpdate(objStatusUpdate);\n                }\n  }\n  \n  //console.log(firstName);\n  //alert('suscriber--');\n  //var subscriberKey = window.event.target.id;\n  //var status = window.event.target.name;\n  //var emailInput = document.getElementById('name').value;\n  \n  /*const objStatusUpdate = {\n          \"SubscriberKey\": subscriberKey,\n          \"Status\": getStatus\n      };\n      var okToRefresh = confirm(\"Do you really want to change the \"+objStatusUpdate[\"SubscriberKey\"]+\" status ?\");\n      if(okToRefresh){\n          var requestPromise = requestForStatusUpdate(objStatusUpdate);\n          //console.log(\"Respons For Client\" +requestPromise);\n          //location.reload(); \n      }*/\n  \n}\nfunction requestForStatusUpdate(objStatusUpdate){\n\nconst xhttp = new XMLHttpRequest();\n            var scatterSeries = [];\n            xhttp.onreadystatechange = function() {\n             if (this.readyState === 4) {\n                    const loading = document.getElementById('cover-spin');\n                    loading.style.display = 'none';\n                    if (this.status === 200) {\n                        //var div = document.querySelector('#subscriberData');\n                        //div.innerHTML = \"\";\n                        //results.innerHTML = \"\";\n                        //deleteRecord.innerHTML = this.responseText;\n                        var data = JSON.parse(this.responseText);\n                        var responseStatus = data[\"Status\"];\n                         var responseMessage = data[\"Message\"];\n                        if(responseStatus == \"OK\"){\n                            getSubscriberDetails();\n                            var toast = document.getElementById(\"snackbar\");\n                            toast.innerHTML = responseMessage;\n                            toast.className = \"show\";\n                            toast.style.backgroundColor = \"#49932e\";\n                            setTimeout(function(){\n                              toast.className = toast.className.replace(\"show\", \"\");\n                            }, 3000);\n                           }\n                         else{\n                            getSubscriberDetails();\n                            var toast = document.getElementById(\"snackbar\");\n                            toast.innerHTML = responseMessage;\n                            toast.className = \"show\";\n                            toast.style.backgroundColor = \"#a91212\";\n                            setTimeout(function(){\n                              toast.className = toast.className.replace(\"show\", \"\");\n                            }, 3000);\n                           \n                         }\n                        //var emailInput = document.getElementById('name').value;\n                   } else {\n                        var toast = document.getElementById(\"snackbar\");\n                        toast.innerHTML = \"Error: \" + this.status + \" \" + this.statusText;\n                        toast.className = \"show\";\n                        toast.style.backgroundColor = \"#a91212\";\n                        setTimeout(function(){\n                          toast.className = toast.className.replace(\"show\", \"\");\n                        }, 5000);\n                        //results.innerHTML = \"Error: \" + this.status + \" \" + this.statusText;\n                    }\n                }\n            };\n            xhttp.open('POST', 'https://cloud.email-v2force.com/updateSubscriber', true);\n            xhttp.setRequestHeader('Content-Type', 'application/json');\n            xhttp.send(JSON.stringify(objStatusUpdate));\n  \n}\n  \n//remove susbcriber details div element\n/*function removeElement(){\n  var div = document.getElementById(\"subscriberData\");\n  var childElements = div.children;\n    for (var i = 0; i < childElements.length; i++) {\n      var element = childElements[i];\n      if (element.tagName == \"BUTTON\" && element.tagName == \"P\") {\n        div.removeChild(element);\n     }\n    }\n}*/\n</script>\n</body>\n</html>","meta":{},"slots":{"col1":{"design":"<p style=\"font-family:arial;color:#ccc;font-size:11px;text-align:center;vertical-align:middle;font-weight:bold;padding:10px;margin:0;border:#ccc dashed 1px;\">Drop blocks or content here</p>","modelVersion":2}},"modelVersion":2}}},"content":{"channelTypeId":3,"contentType":"text/html","isDefault":true,"isStaticContent":true,"name":"getDataExtenisonDetails","siteId":"{{mcpm#/entities/primaryLandingPages/246030-1584/data/definition/landingPageId}}"},"name":"getDataExtenisonDetails","primaryId":"{{mcpm#/entities/primaryLandingPages/246030-1584/data/id}}","state":{"contentType":"text/html","description":"","name":"getDataExtenisonDetails","siteId":"{{mcpm#/entities/primaryLandingPages/246030-1584/data/definition/landingPageId}}"}}}},"microsites":{"262735":{"issues":[],"originID":"262735","originEID":"mch4s3mv5j6r7tyf5xqf8s0-y2wm","data":{"collectionId":"{{mcpm#/entities/cloudPageCollections/407/data/collectionId}}","description":"","domain":"{{mcpm:cloudPages-domain}}","isNoFollow":false,"isNoIndex":false,"key":"micrositeExmaple","name":"Microsite Exmaple","requiresSsl":true}}},"micrositePages":{},"micrositePageVersions":{},"primaryLandingPages":{"246030-1584":{"issues":[],"originID":"246030-1584","originEID":"mch4s3mv5j6r7tyf5xqf8s0-y2wm","data":{"asset":{"assetType":{"id":205,"name":"webpage"},"name":"getDataExtenisonDetails (2)","category":{"id":"{{mcpm#/entities/categories/9745/data/id}}"},"contentType":"text/html","meta":{"globalStyles":{"isLocked":false,"body":{"max-width":"1280px"}}},"views":{"html":{"thumbnail":{},"content":"<!DOCTYPE html>\n<html>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<head><meta name=\"ROBOTS\" content=\"INDEX,FOLLOW\"><meta name=\"keywords\" content=\"\"><meta name=\"description\" content=\"\">\n<title>Form Submission</title>\n<style>\n/*#cover-spin {\n    position:fixed;\n    width:100%;\n    left:0;right:0;top:0;bottom:0;\n    background-color: rgba(255,255,255,0.7);\n    z-index:9999;\n    display:none;\n}*/\n  \n#cover-spin {\n    position: fixed;\n    width: 98%;\n    left: 15px;\n    height: 47%;\n    right: 0px;\n    top: 208px;\n    bottom: 0;\n    background-color: rgb(255 255 255 / 40%);\n    z-index: 9999;\n    display: none;\n}\n\n@-webkit-keyframes spin {\n from {-webkit-transform:rotate(0deg);}\n to {-webkit-transform:rotate(360deg);}\n}\n\n@keyframes spin {\n from {transform:rotate(0deg);}\n to {transform:rotate(360deg);}\n}\n\n#cover-spin::after {\n    content:'';\n    display:block;\n    position:absolute;\n    left:48%;top:40%;\n    width:40px;height:40px;\n    border-style:solid;\n    border-color:black;\n    border-top-color:transparent;\n    border-width: 4px;\n    border-radius:50%;\n    opacity: 5;\n    -webkit-animation: spin .8s linear infinite;\n    animation: spin .8s linear infinite;\n}\n  \n  \n#subscrber-update {\n    position:fixed;\n    width:100%;\n    left:0;right:0;top:0;bottom:0;\n    background-color: rgba(255,255,255,0.7);\n    z-index:9999;\n    display:none;\n}\n\n@-webkit-keyframes spin {\n from {-webkit-transform:rotate(0deg);}\n to {-webkit-transform:rotate(360deg);}\n}\n\n@keyframes spin {\n from {transform:rotate(0deg);}\n to {transform:rotate(360deg);}\n}\n\n#subscrber-update::after {\n    content:'';\n    display:block;\n    position:absolute;\n    left:48%;top:40%;\n    width:40px;height:40px;\n    border-style:solid;\n    border-color:black;\n    border-top-color:transparent;\n    border-width: 4px;\n    border-radius:50%;\n    opacity: 5;\n    -webkit-animation: spin .8s linear infinite;\n    animation: spin .8s linear infinite;\n}\n\n  \n input[type=email]{\n  width: 100%;\n  padding: 10px 10px;\n  margin: 0px 0;\n  display: inline-block;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  box-sizing: border-box;\n}\n  \n  select[class = \"select-rows\"]{\n      width: 100%;\n  padding: 10px 10px;\n  margin: 8px 0;\n  display: inline-block;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  box-sizing: border-box;\n  }\n  select[id = \"status-dropdown\"]{\n    font-weight: bold;\n    line-height: 18px;\n    color: #4e8abe;\n    text-shadow: none;\n    border: 1px solid #b5c6d2;\n    -webkit-box-shadow: 1px 1px 2px 0 rgba(0,0,0,0.15);\n    -moz-box-shadow: 1px 1px 2px 0 rgba(0,0,0,0.15);\n    box-shadow: 1px 1px 2px 0 rgba(0,0,0,0.15);\n  }\nbutton[type=submit] {\n    padding: 10px 12px 10px;\n    color: #fff;\n    text-shadow: none;\n    background-color: #7fb9ec;\n    background-color: #6ba6da;\n    *background-color: #7fb9ec;\n    background-image: -moz-linear-gradient(top,#7fb9ec,#4e8abe);\n    background-image: -webkit-gradient(linear,0 0,0 100%,from(#7fb9ec),to(#4e8abe));\n    background-image: -webkit-linear-gradient(top,#7fb9ec,#4e8abe);\n    background-image: -o-linear-gradient(top,#7fb9ec,#4e8abe);\n    background-image: linear-gradient(to bottom,#7fb9ec,#4e8abe);\n    background-repeat: repeat-x;\n    border-width: 0;\n    filter: progid:dximagetransform.microsoft.gradient(startColorstr='#ff7fb9ec',endColorstr='#ff4e8abe',GradientType=0);\n    filter: progid:dximagetransform.microsoft.gradient(enabled=false);\n}\nbutton[type=submit]:hover {\n  background-color: #4e8abe;\n  background-image: -moz-linear-gradient(top, #4e8abe, #7fb9ec);\n  background-image: -webkit-gradient(linear, 0 0, 0 100%, from(#4e8abe), to(#7fb9ec));\n  background-image: -webkit-linear-gradient(top, #4e8abe, #7fb9ec);\n  background-image: -o-linear-gradient(top, #4e8abe, #7fb9ec);\n  background-image: linear-gradient(to bottom, #4e8abe, #7fb9ec);\n}\n  \nbutton[id=changeStatus]{\n    padding: 5px 10px 5px;\n    color: #fff;\n    text-shadow: none;\n    background-color: #7fb9ec;\n    background-color: #6ba6da;\n    *background-color: #7fb9ec;\n    background-image: -moz-linear-gradient(top,#7fb9ec,#4e8abe);\n    background-image: -webkit-gradient(linear,0 0,0 100%,from(#7fb9ec),to(#4e8abe));\n    background-image: -webkit-linear-gradient(top,#7fb9ec,#4e8abe);\n    background-image: -o-linear-gradient(top,#7fb9ec,#4e8abe);\n    background-image: linear-gradient(to bottom,#7fb9ec,#4e8abe);\n    background-repeat: repeat-x;\n    border-width: 0;\n    filter: progid:dximagetransform.microsoft.gradient(startColorstr='#ff7fb9ec',endColorstr='#ff4e8abe',GradientType=0);\n    filter: progid:dximagetransform.microsoft.gradient(enabled=false);\n    width: 100px;\n}\n\nbutton[id=button1]{\n  padding: 5px 10px 5px;\n    font-weight: bold;\n    line-height: 18px;\n    color: #4e8abe;\n    text-shadow: none;\n    border: 1px solid #b5c6d2;\n    -webkit-box-shadow: 1px 1px 2px 0 rgba(0,0,0,0.15);\n    -moz-box-shadow: 1px 1px 2px 0 rgba(0,0,0,0.15);\n    box-shadow: 1px 1px 2px 0 rgba(0,0,0,0.15);\n    margin-top: 10px;\n }\nbody {font-family: Arial; \n       text-color: black;transform: scale(0.9);}\n#body-container{\n    padding: 0px;\n    font-size:15px;\n    margin-top: -25px;\n  }\n  \n  #table-search{\n    padding: 0px;\n    font-size:15px;\n  }\n  #table-content-main{\n    padding: 10px;\n  } \n/* tab css */\n.tab {\n  overflow: hidden;\n  border: 1px solid #ccc;\n  background-color: #f1f1f1;\n}\n\n/* Style the buttons inside the tab */\n.tab button {\n  background-color: inherit;\n  float: left;\n  border: none;\n  outline: none;\n  cursor: pointer;\n  padding: 11px 10px;\n  transition: 0.3s;\n  font-size: 17px;\n}\n\n/* Change background color of buttons on hover */\n.tab button:hover {\n  background-color: #ddd;\n}\n\n/* Create an active/current tablink class */\n.tab button.active {\n   z-index: 20;\n    color: #333333;\n    background: #f0f9fe;\n    background: -moz-linear-gradient(top, #f0f9fe 0%, #ffffff 65%);\n    background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#f0f9fe), color-stop(65%,#ffffff));\n    background: -webkit-linear-gradient(top, #f0f9fe 0%,#ffffff 65%);\n    background: -o-linear-gradient(top, #f0f9fe 0%,#ffffff 65%);\n    background: -ms-linear-gradient(top, #f0f9fe 0%,#ffffff 65%);\n    background: linear-gradient(to bottom, #f0f9fe 0%,#ffffff 65%);\n    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#f0f9fe', endColorstr='#ffffff',GradientType=0 );\n    cursor: default;\n}\n\n/* Style the tab content */\n.tabcontent {\n  display: none;\n  padding: 6px 12px;\n  border: 1px solid #ccc;\n  border-top: none;\n}\n  \n  \n.toast {\n  visibility: hidden;\n  position: fixed;\n  bottom: 0;\n  left: 50%;\n  transform: translateX(-50%);\n  background-color: #333;\n  color: #fff;\n  text-align: center;\n  border-radius: 10px;\n  padding: 16px;\n  z-index: 1;\n}\n\n.toast.show {\n  visibility: visible;\n  animation: fadein 0.5s, fadeout 0.5s 2.5s;\n}\n\n@keyframes fadein {\n  from {bottom: 0; opacity: 0;}\n  to {bottom: 30px; opacity: 1;}\n}\n\n@keyframes fadeout {\n  from {bottom: 30px; opacity: 1;}\n  to {bottom: 0; opacity: 0;}\n}\n  \n#snackbar {\n    visibility: hidden;\n    width: 424px;\n    margin-left: -100px;\n    background-color: #333;\n    color: #fff;\n    text-align: center;\n    border-radius: 2px;\n    padding: 16px;\n    position: fixed;\n    z-index: 1;\n    left: 50%;\n    top: 7%;\n    transform: translate(-32%, -50%);\n    font-size: 13px;\n}\n\n#snackbar.show {\n  visibility: visible;\n}\n\n\n.pagination {\n  width:140px;\n  margin-top: 10px;\n  margin-bottom: 20px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  font-size: 14px;\n}\n\n.pagination button {\n  border: none;\n  background-color: transparent;\n  color: #007bff;\n  cursor: pointer;\n}\n\n.pagination select {\n  margin-right: 10px;\n}\n.table-wrapper {\n  height: 300px; /* Set the height you want for the tbody */\n  overflow-y: auto; /* Enable vertical scrolling */\n  width: 100%;\n}\n\ntable {\n  border-collapse: collapse;\n  width: 100%;\n  text-align: center;\n  margin: 0 auto;\n}\n\nthead th {\n  background-color: #ddd;\n  font-weight: bold;\n  position: sticky;\n  top: 0;\n  padding: 10px;\n  border: 1px solid #ddd;\n  background-color: #f2f2f2;\n  text-align: center;\n}\n\ntbody tr {\n  border-bottom: 1px solid #ddd;\n}\n  \ntbody td {\n    padding: 8px;\n    text-align: center;\n    padding: 12px;\n    border: 2px solid #ddd;\n}\ntr:nth-child(even) {\n  background-color: #f2f2f2;\n}\n.search-box {\n    padding: 5px;\n    width: 284px;\n    float: right;\n    margin-top: 11px;\n}\n.search-box-list {\n    padding: 5px;\n    width: 284px;\n}\n</style>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\">\n</head>\n<body>\n<div id = \"body-container\">\n<input type=\"email\" id=\"name\" name=\"email\" placeholder=\"Enter Subscriber Email Address\" required style = \"width:30%\">\n<button type=\"Submit\" id = \"submit\">Get Records</button><span id=\"error-message\" style=\"color:red\"></span><br>\n<div id=\"cover-spin\" style=\"display: none;\"></div> \n<div id =\"snackbar\"></div>\n   <div style = \"margin-bottom:5px;\">Click on the buttons inside the tabbed content for Searching Email Address\n    <strong><p id=\"contnetSearch\" style = \"display: inline-block;\"></p></strong>\n  </div>\n<!--<div id=\"subscriber\" ></div>\n<div id=\"deleteRecord\" ></div>\n<div id=\"results\" ></div>-->\n<div id = \"table-search\"> \n<div class=\"tab\">\n  <button class=\"tablinks\" onclick=\"openCity(event, 'getDataExtension')\"><strong>Data Extension Details</strong></button>\n  <button id=\"subscriberDetails\" class=\"tablinks\" onclick=\"openCity(event, 'getSubscriberDetails')\"><strong>Subscriber Lists Details</strong></button>\n</div>\n\n<div id=\"getDataExtension\" class=\"tabcontent\" style = \"display:block;\">\n<div id = \"table-content-main\"> \n<div id=\"deleteRecordButton\">\n  <button id = \"button1\" class=\"\" disabled = \"true\" onClick = \"deleteRecord()\">\n     Delete Record\n  </button>\n  <input id = \"search-data-extensionFilter\" class  = \"search-box\" placeholder = \"Filter a subscriber by searching....\">\n</div>\n<br>\n<div class=\"table-wrapper\">\n  <table id=\"my-table\">\n    <thead>\n      <tr>\n        <th><input type=\"checkbox\" id=\"selectAll\" /></th>\n        <th>Subscriber Key</th>\n        <th>Data Extension Name</th>\n        <th>Data Extension Key</th>\n        <th>Data Extension Path</th>\n      </tr>\n    </thead>\n    <tbody>\n      <!-- Add your table data here -->\n    </tbody>\n  </table>\n</div>\n<div id= \"data-extension_Pagination\" style = \"display:block;\">\n<div class=\"pagination\">\n  <select id=\"rowsPerPage\" class = \"select-rows\">\n    <option value=\"10\">10</option>\n    <option value=\"50\">50</option>\n    <option value=\"100\">100</option>\n    <option value=\"200\">200</option>\n    <option value=\"All\" selected>All</option>\n  </select>\n</div>\n  <span id=\"currentPage\"></span>\n  <button id=\"prevPage\"><i class=\"fa fa-angle-left\"></i></button>\n  <button id=\"nextPage\"><i class=\"fa fa-angle-right\"></i></button>\n</div>\n</div>\n</div>\n\n  \n<div id=\"getSubscriberDetails\" class=\"tabcontent\">\n<div id = \"table-content-main\">\n  <div><input id = \"listFilter-search\" class =\"search-box-list\" placeholder = \"Filter a subscriber by searching....\"></div><br>\n<div class=\"table-wrapper\">\n<table id = \"subscriber-table\">\n    <thead>\n       <th>Subscriber Key</th>\n       <th>List ID</th>\n       <th>List Name</th>\n       <th>Folder Name</th>\n       <th>List Path</th>\n       <th>Status\n            <select id=\"status-select\">\n                <option values=\"All\" selected>All</option>\n                <option values=\"Active\">Active</option>\n                <option values=\"Unsubscribed\">Unsubscribed</option>\n                <option values=\"Bounced\">Bounced</option>\n                <option values=\"Held\">Held</option>\n            </select></th>\n       <th>Subscribe/Unsubscribe</th>\n    </thead>\n    <tbody>\n    </tbody>\n</table>\n</div>\n<div style = \"display: inline-block;\">\n<div class=\"pagination\">\n  <select id=\"subscriber-rows\" class = \"select-rows\">\n    <option value=\"10\">10</option>\n    <option value=\"50\">50</option>\n    <option value=\"100\">100</option>\n    <option value=\"200\">200</option>\n    <option value=\"All\" selected>All</option>\n  </select>\n</div>\n  <span id=\"subscriber-currentPage\"></span>\n  <button id=\"subscriber-prevPage\"><i class=\"fa fa-angle-left\"></i></button>\n  <button id=\"subscriber-nextPage\"><i class=\"fa fa-angle-right\"></i></button>\n</div>\n</div>\n</div> \n</div>  \n</div> \n<!--<div id=\"subscriberData\"><div id=\"cover-spin\" style=\"display: none;\"></div></div><br>\n<br>\n<br><br> -->\n  \n \n<script>\n//handle tab\nfunction openCity(evt, cityName) {\n  var i, tabcontent, tablinks;\n  tabcontent = document.getElementsByClassName(\"tabcontent\");\n  for (i = 0; i < tabcontent.length; i++) {\n    tabcontent[i].style.display = \"none\";\n  }\n  tablinks = document.getElementsByClassName(\"tablinks\");\n  for (i = 0; i < tablinks.length; i++) {\n    tablinks[i].className = tablinks[i].className.replace(\" active\", \"\");\n  }\n  document.getElementById(cityName).style.display = \"block\";\n  evt.currentTarget.className += \" active\";\n}\ndocument.getElementsByClassName(\"tablinks\")[0].click();  \n  \n// call the \"getSubscriberDetails Function when i clicked on \"All Subscriber Tab\"\"\ndocument.getElementById(\"subscriberDetails\").addEventListener(\"click\", function() {\n  var evt = new MouseEvent(\"click\");\n  getSubscriberDetails();\n  //var section = document.getElementById(\"table-search\");\n  //section.scrollIntoView();\n  const selectValue = document.querySelector('#status-select');\n  selectValue.value = \"All\";\n  \n  const searchFilterInput = document.querySelector('#listFilter-search');\n  searchFilterInput.value = '';\n  \n});\n\n  \n// Get the file input element and add an event listener to detect when a file is selected\nvar clickButton = document.getElementById('submit');\nclickButton.addEventListener('click', handleFileInput);\n//clearTable(\"my-table\");\n  \n//check valid email\nfunction checkEmail() {\n  var emailInput = document.getElementById(\"name\");\n  var errorMessage = document.getElementById(\"error-message\");\n  var email = emailInput.value;\n  var emailRegex = /\\S+@\\S+\\.\\S+/;\n\n  if (!emailRegex.test(email)) {\n    errorMessage.textContent = \"Please enter a valid email address\";\n    emailInput.style.border = \"1px solid red\";\n    return false;\n  } else {\n    errorMessage.textContent = \"\";\n    emailInput.style.border = \"\";\n    return true;\n  }\n}\n  \nfunction handleFileInput (){\n    alert(\"Get Record\");\n    var emailInput = document.getElementById('name').value;\n    if(emailInput == \"\"){\n      alert(\"Please Enter Email Address\");\n       }\n    else{\n    var checkEmailResponse = checkEmail();\n     if(checkEmailResponse){\n            document.getElementsByClassName(\"tablinks\")[0].click();\n            var DataExtensionTable = document.querySelector('#my-table tbody');\n            DataExtensionTable.innerHTML = '';\n            var ListTable = document.querySelector('#subscriber-table tbody');\n            ListTable.innerHTML = '';\n            var emailInput = document.getElementById('name').value;\n            var contentSearch = document.querySelector('#contnetSearch');\n            contentSearch.innerHTML = emailInput;\n            //getSubscriberDetails();\n            uncheckAllCheckboxes();\n            reteriveRecords(emailInput);\n            //var section = document.getElementById(\"table-search\");\n            //section.scrollIntoView();\n       \n        }\n\n    } \n}\n\nfunction reteriveRecords(emailInput){\n         \n    const loading = document.getElementById('cover-spin');\n          loading.style.display = 'block';\n          //results.innerHTML = '';\n    const searchFilterDataExtension = document.querySelector('#search-data-extensionFilter');\n    searchFilterDataExtension.value = '';\n    const xhttp = new XMLHttpRequest();\n            var scatterSeries = [];\n            xhttp.onreadystatechange = function() {\n             if (this.readyState === 4) {\n                    loading.style.display = 'none';\n                    //loggedIn.style.display = 'block';\n                  \n                    if (this.status === 200) {\n                        //results.innerHTML = this.responseText;\n                                            //table.innerHTML = '';\n                      /*var div = document.querySelector('#deleteRecordButton');\n                      div.innerHTML = '';\n                      var tablehead = document.querySelector('#my-table thead');\n                      table.innerHTML = '';\n                      var table = document.querySelector('#my-table tbody');\n                      table.innerHTML = '';\n                      var data = JSON.parse(this.responseText);  */\n                      var data = JSON.parse(this.responseText);\n                      \n                      if (data.length > 0) {\n                      // assuming that data is an array of objects with properties DataExtensionName, DataExtensionKey, URL, and DataExtensionPath\n                      var table = document.querySelector('#my-table tbody');\n                      table.innerHTML = '';\n          \n                      for (var i = 0; i < data.length; i++) {\n                        var table = document.querySelector('#my-table tbody');\n                        var row = document.createElement('tr');\n\n                        var checkbox = document.createElement('td');\n                        checkbox.innerHTML = '<input type=\"checkbox\" onchange=\"handleCheckboxChange(this)\">';\n                        checkbox.style.display = \"text-align: center\";\n                        \n                        var subkey = document.createElement('td');\n                        subkey.textContent = data[i].SubscriberKey;\n                        \n                        var name = document.createElement('td');\n                        name.textContent = data[i].DataExtensionName;\n\n                        var key = document.createElement('td');\n                        key.textContent = data[i].DataExtensionKey;\n\n                        var path = document.createElement('td');\n                        var link = document.createElement('a');\n                        link.textContent = data[i].DataExtensionPath;\n                        link.href = data[i].URL;\n                        link.target = '_blank';\n                        path.appendChild(link);\n                        \n                        \n\n                        row.appendChild(checkbox);\n                        row.appendChild(subkey);\n                        row.appendChild(name);\n                        row.appendChild(key);\n                        row.appendChild(path);\n                        \n\n                        table.appendChild(row);\n                        \n                     }\n                      \n                  } else {\n                      var table = document.querySelector('#my-table tbody');\n                      table.innerHTML = '';\n                      var toast = document.getElementById(\"snackbar\");\n                      toast.innerHTML = \"No Data Found For This Subscriber.\";\n                      toast.className = \"show\";\n                      toast.style.backgroundColor = \"#a91212\";\n                      setTimeout(function(){\n                        toast.className = toast.className.replace(\"show\", \"\");\n                      }, 6000);\n                      //results.innerHTML = '<p>No data found for subscriber.</p>';\n                  }\n                   } else {\n                      var toast = document.getElementById(\"snackbar\");\n                      toast.innerHTML =  \"Error: \" + this.status + \" Reload Again !\" + this.statusText;\n                      toast.className = \"show\";\n                      toast.style.backgroundColor = \"#a91212\";\n                      setTimeout(function(){\n                        toast.className = toast.className.replace(\"show\", \"\");\n                      }, 10000);\n                        //results.innerHTML = \"Error: \" + this.status + \" \" + this.statusText;\n                    }\n                }\n            };\n            xhttp.open('POST', 'https://cloud.email-v2force.com/getRecords', true);\n            xhttp.setRequestHeader('Content-Type', 'application/json');\n            xhttp.send(JSON.stringify({\"Email\": emailInput }));\n  \n         \n            //pagination code start for data extension table\n            const dataExtnesionPagination = document.querySelector('#data-extension_Pagination');\n            dataExtnesionPagination.style.display = \"block\";\n            const table1 = document.querySelector('#my-table');\n            const select1 = document.querySelector('#rowsPerPage');\n            select1.value = \"All\";\n            const prevBtn1 = document.querySelector('#prevPage');\n            const nextBtn1 = document.querySelector('#nextPage');\n            const currentPage1 = document.querySelector('#currentPage');\n            const searchFilter1 = document.querySelector('#search-data-extensionFilter');\n            setupPagination(table1, select1, prevBtn1, nextBtn1, currentPage1,searchFilter1);\n            //pagination code start for data extension table end\n}\n\n \nfunction getSubscriberDetails(){\n    //alert(\"your Email\" +emailInput);\n    const loading = document.getElementById('cover-spin');\n    loading.style.display = 'block';\n  \n    const selectValue = document.querySelector('#status-select');\n    selectValue.value = \"All\";\n\n    const searchFilterInput = document.querySelector('#listFilter-search');\n    searchFilterInput.value = '';\n  \n    var table = document.querySelector('#subscriber-table tbody');\n                      // assuming that data is an array of objects with properties DataExtensionName, DataExtensionKey, URL, and DataExtensionPath\n    table.innerHTML = '';\n  \n    var emailInput = document.getElementById('contnetSearch').innerHTML;\n    const xhttp = new XMLHttpRequest();\n            var scatterSeries = [];\n            xhttp.onreadystatechange = function() {\n             if (this.readyState === 4) {\n                   \n                    if (this.status === 200) {\n                         loading.style.display = 'none';\n                        //var div = document.querySelector('#subscriberData');\n                        //div.innerHTML = \"\";\n                        //subscriber.innerHTML = this.responseText;\n                        var data = JSON.parse(this.responseText);\n                        \n                        \n                    if (data.length > 0) {\n                      var table = document.querySelector('#subscriber-table tbody');\n                      // assuming that data is an array of objects with properties DataExtensionName, DataExtensionKey, URL, and DataExtensionPath\n                      table.innerHTML = '';\n                      for (var i = 0; i < data.length; i++) {\n                        var table = document.querySelector('#subscriber-table tbody');\n                        var row = document.createElement('tr');\n                        \n                        var subscriberKey = document.createElement('td');\n                        subscriberKey.textContent = data[i].SubscriberKey;\n                        \n                        var ListID = document.createElement('td');\n                        ListID.textContent = data[i].ListID;\n                        \n                        var ListName = document.createElement('td');\n                        ListName.textContent = data[i].ListName;\n                        \n                        var DataFolder = document.createElement('td');\n                        DataFolder.textContent = data[i].DataFolder;\n                        DataFolder.style.textTransform = \"capitalize\";\n                        \n                        var ListPath = document.createElement('td');\n                        ListPath.textContent = data[i].ListPath;\n                        ListPath.style.textTransform = \"capitalize\";\n                        \n                        var Status = document.createElement('td');\n                        Status.classList.add('status');\n                        Status.textContent = data[i].Status; \n                        \n                        if(data[i].Status == \"Active\"){\n                          var changeStatus = document.createElement('td');\n                          changeStatus.style.textAlign = \"center\";\n                          var button = document.createElement('button');\n                          button.textContent = 'Unsubscribe';\n                          button.id = \"changeStatus\";\n                          //button.name = Status;\n                          //button.class = \"changeStatus\";\n                          button.addEventListener('click', UpdateStatus);\n                          //subscriberKey.textContent = data[i].SubscriberKey;\n                          changeStatus.appendChild(button);\n                        }\n                        else if(data[i].Status == \"Unsubscribed\"){\n                          var changeStatus = document.createElement('td');\n                          changeStatus.style.textAlign = \"center\";\n                          var button = document.createElement('button');\n                          button.textContent = 'Active';\n                          //button.id = subscriberKey;\n                          //button.name = Status;\n                          button.id = \"changeStatus\";\n                          //button.class = \"changeStatus\";\n                          button.addEventListener('click', UpdateStatus);\n                          //subscriberKey.textContent = data[i].SubscriberKey;\n                          changeStatus.appendChild(button);\n                        }\n                        else if(data[i].Status == \"Bounced\"){\n                          var changeStatus = document.createElement('td');\n                          changeStatus.style.textAlign = \"center\";\n                          var button = document.createElement('button');\n                          button.textContent = 'Unsubscribe';\n                          //button.id = subscriberKey;\n                          //button.name = Status;\n                          button.id = \"changeStatus\";\n                          //button.class = \"changeStatus\";\n                          button.addEventListener('click', UpdateStatus);\n                          //subscriberKey.textContent = data[i].SubscriberKey;\n                          changeStatus.appendChild(button);\n                        }\n                        else if(data[i].Status == \"Held\"){\n                          var changeStatus = document.createElement('td');\n                          changeStatus.style.textAlign = \"center\";\n                          var button = document.createElement('button');\n                          button.textContent = 'Unsubscribe';\n                          //button.id = subscriberKey;\n                          //button.name = Status;\n                          //button.class = \"changeStatus\";\n                          button.id = \"changeStatus\";\n                          button.addEventListener('click', UpdateStatus);\n                          //subscriberKey.textContent = data[i].SubscriberKey;\n                          changeStatus.appendChild(button);\n                        }\n                        else if(data[i].Status == \"Deleted\"){\n                          var changeStatus = document.createElement('td');\n                          changeStatus.style.textAlign = \"center\";\n                          var button = document.createElement('button');\n                          button.textContent = 'Unsubscribe';\n                          //button.id = subscriberKey;\n                          //button.name = Status;\n                          //button.class = \"changeStatus\";\n                          button.id = \"changeStatus\";\n                          button.addEventListener('click', UpdateStatus);\n                          //subscriberKey.textContent = data[i].SubscriberKey;\n                          changeStatus.appendChild(button);\n                        }\n                        else{\n                        }\n                        \n                        row.appendChild(subscriberKey);\n                        row.appendChild(ListID);\n                        row.appendChild(ListName);\n                        row.appendChild(DataFolder);\n                        row.appendChild(ListPath);\n                        row.appendChild(Status);\n                        row.appendChild(changeStatus);\n                        \n                        table.appendChild(row);\n\n                      }\n                 \n                    /*for (var i = 0; i < data.length; i++) {\n                      //var status = data[\"Status\"];\n                      //var emailAddress = data[\"EmailAddress\"];\n                      var subscriberKey = data[i].SubscriberKey;\n                      console.log(\"SubscriberKey\" +subscriberKey);\n                      \n                      var Status = data[i].Status;\n                      console.log(\"Status\" +Status);\n                      \n                     }*/\n                  } else {\n                      var table = document.querySelector('#subscriber-table tbody');\n                      // assuming that data is an array of objects with properties DataExtensionName, DataExtensionKey, URL, and DataExtensionPath\n                      table.innerHTML = '';\n                    \n                      //var table = document.querySelector('#my-table tbody');\n                      //table.innerHTML = '';\n                      var toast = document.getElementById(\"snackbar\");\n                      toast.innerHTML = \"Subscriber Not Exit In Any List List\";\n                      toast.className = \"show\";\n                      toast.style.backgroundColor = \"#a91212\";\n                      setTimeout(function(){\n                        toast.className = toast.className.replace(\"show\", \"\");\n                      }, 10000);\n                    \n                      //results.innerHTML = '<p> subscriber not exit in all sub.</p>';\n                  }\n                   } else {\n                        var toast = document.getElementById(\"snackbar\");\n                        toast.innerHTML = \"Error: \" + this.status + \" Please Try Again ! \" + this.statusText;\n                        toast.className = \"show\";\n                        toast.style.backgroundColor = \"#a91212\";\n                        setTimeout(function(){\n                        toast.className = toast.className.replace(\"show\", \"\");\n                        }, 10000);\n                        //results.innerHTML = \"Error: \" + this.status + \" \" + this.statusText;\n                    }\n                }\n            };\n            xhttp.open('POST', 'https://cloud.email-v2force.com/allSubscriberlist', true);\n            xhttp.setRequestHeader('Content-Type', 'application/json');\n            xhttp.send(JSON.stringify({\"Email\": emailInput }));\n  \n  \n  // list table pagination\nconst table2 = document.querySelector('#subscriber-table');\nconst select2 = document.querySelector('#subscriber-rows');\nselect2.value = \"All\";\nconst prevBtn2 = document.querySelector('#subscriber-prevPage');\nconst nextBtn2 = document.querySelector('#subscriber-nextPage');\nconst currentPage2 = document.querySelector('#subscriber-currentPage');\nconst searchFilter2 = document.querySelector('#listFilter-search');\nsetupPagination(table2, select2, prevBtn2, nextBtn2, currentPage2, searchFilter2);\n// list table pagination end\n}\n\n \n\nfunction setupPagination(table, select, prevBtn, nextBtn, currentPage, searchInput) {\n  const tbody = table.querySelector('tbody');\n  let rowsPerPage = select.value;\n  let currentPageNum = 1;\n  let searchQuery = '';\n  let statusFilter = 'All';\n  //currentPage.textContent = `Page ${currentPageNum} of 1`;\n  // Function to display rows based on current page number, rows per page, and search query\nfunction displayRows() {\n  const rows = tbody.querySelectorAll('tr');\n  let filteredRows = [];\n  const firstRow = (currentPageNum - 1) * rowsPerPage;\n  const lastRow = firstRow + rowsPerPage - 1;\n  \n  rows.forEach((row, index) => {\n    let status = '';\n      const statusEl = row.querySelector('.status');\n      if (statusEl) {\n        status = statusEl.textContent;\n      }\n    \n    if (select.value === 'All' && (searchQuery === '' || row.textContent.toLowerCase().includes(searchQuery)) && (statusFilter === 'All' || status === statusFilter)) {\n      row.style.display = 'table-row';\n    } else if (index >= firstRow && index <= lastRow && searchQuery === '' && statusFilter === 'All') {\n      row.style.display = 'table-row';\n      console.log(\"1\");\n    } else if (index >= firstRow && index <= lastRow && select.value !== 'All') {\n      if ((searchQuery === '' || row.textContent.toLowerCase().includes(searchQuery)) && (statusFilter === 'All' || status === statusFilter)) {\n          select.value = \"All\";\n          row.style.display = 'table-row';\n      } else {\n          row.style.display = 'none';\n      }\n    } else {\n      row.style.display = 'none';\n    }\n  });\n\n  if(select.value === 'All'){\n      currentPage.textContent = `Page ${currentPageNum} of 1`;\n     }\n  else{\n    currentPage.textContent = `Page ${currentPageNum} of ${Math.ceil(rows.length / rowsPerPage)}`;\n  }\n  if (select.value === 'All') {\n    prevBtn.disabled = true;\n    nextBtn.disabled = true;\n  } else {\n    prevBtn.disabled = false;\n    nextBtn.disabled = false;\n  }\n}\n  // Initial display of rows\n  displayRows();\n\n  // Event listener for rows per page select\n  select.addEventListener('change', () => {\n    if (select.value === 'All' || select.value === '') {\n      rowsPerPage = tbody.querySelectorAll('tr').length;\n    } else {\n      rowsPerPage = parseInt(select.value);\n    }\n    currentPageNum = 1;\n    displayRows();\n  });\n\n  // Event listener for previous button\n  prevBtn.addEventListener('click', () => {\n    if (currentPageNum > 1) {\n      currentPageNum--;\n       uncheckAllCheckboxes();\n      displayRows();\n    }\n  });\n\n  // Event listener for next button\n  nextBtn.addEventListener('click', () => {\n    const rows = tbody.querySelectorAll('tr');\n    const lastPage = Math.ceil(rows.length / rowsPerPage);\n    if (currentPageNum < lastPage) {\n      currentPageNum++;\n       uncheckAllCheckboxes();\n      displayRows();\n    }\n  });\n\n  // Event listener for search input\n  searchInput.addEventListener('input', () => {\n    searchQuery = searchInput.value.toLowerCase();\n    currentPageNum = 1;\n    displayRows();\n  });\n  \n  // Event listener for status filter\n  const statusFilterInput = document.querySelector('#status-select');\n  statusFilterInput.addEventListener('change', () => {\n    statusFilter = statusFilterInput.value;\n    currentPageNum = 1;\n    displayRows();\n  });\n}\n\n// Call the function for each table\nfunction uncheckAllCheckboxes() {\n  const table = document.querySelector('#my-table');\n  const checkboxes = table.querySelectorAll('input[type=\"checkbox\"]');\n  checkboxes.forEach((checkbox) => {\n    checkbox.checked = false;\n    handleCheckboxChange(checkbox);\n  });\n  selectedRows = [];\n  document.querySelector(\"#button1\").disabled = true;\n}\n\n// Call the function for each table\nfunction uncheckAllCheckboxes() {\n  const table = document.querySelector('#my-table');\n  const checkboxes = table.querySelectorAll('input[type=\"checkbox\"]');\n  checkboxes.forEach((checkbox) => {\n    checkbox.checked = false;\n    handleCheckboxChange(checkbox);\n  });\n  selectedRows = [];\n  document.querySelector(\"#button1\").disabled = true;\n}\n\n// selet table rows ...........>\nlet selectedRows = [];\n\nfunction handleCheckboxChange(checkbox) {\n  const row = checkbox.parentNode.parentNode;\n  const subKeyValue = row.children[1].textContent.trim();\n  const firstValueTrim = row.children[2].textContent.trim();\n  const secondValueTrim = row.children[3].textContent.trim();\n\n  const rowValues = [subKeyValue, firstValueTrim, secondValueTrim];\n\n  if (document.querySelector(\"#selectAll\").checked) {\n    if (checkbox.checked) {\n      selectedRows.push(rowValues);\n    } else {\n      selectedRows = selectedRows.filter(row => row[0] !== subKeyValue);\n    }\n  } else {\n    const checkboxes = document.querySelectorAll(\"tbody tr:not([style*='none']) input[type='checkbox']:checked\");\n    selectedRows = [];\n    checkboxes.forEach((checkbox) => {\n      const row = checkbox.parentNode.parentNode;\n      const subKeyValue = row.children[1].textContent.trim();\n      const firstValueTrim = row.children[2].textContent.trim();\n      const secondValueTrim = row.children[3].textContent.trim();\n      const rowValues = [subKeyValue, firstValueTrim, secondValueTrim];\n      selectedRows.push(rowValues);\n    });\n  }\n\n  console.log(selectedRows);\n\n  if (selectedRows.length > 0) {\n    document.querySelector(\"#button1\").disabled = false;\n  } else {\n    document.querySelector(\"#button1\").disabled = true;\n  }\n}\n\nconst selectAllCheckbox = document.querySelector(\"#selectAll\");\nselectAllCheckbox.addEventListener(\"change\", function () {\n  const checkboxes = document.querySelectorAll(\"tbody tr:not([style*='none']) input[type='checkbox']\");\n  if (selectAllCheckbox.checked) {\n    selectedRows = [];\n    checkboxes.forEach((checkbox) => {\n      checkbox.checked = true;\n      handleCheckboxChange(checkbox);\n    });\n  } else {\n    checkboxes.forEach((checkbox) => {\n      checkbox.checked = false;\n      handleCheckboxChange(checkbox);\n    });\n    selectedRows = [];\n    document.querySelector(\"#button1\").disabled = true;\n  }\n});\n  \n// delete functionality....................> \nfunction deleteRecord(){\n        const loading = document.getElementById('cover-spin');\n        loading.style.display = 'block';\n        var conigJSON = {\n        \"SelectedDE\" : selectedRows,\n        \"EmailAddress\": document.getElementById(\"contnetSearch\").innerHTML\n      }\n      var okToRefresh = confirm(\"Delete All The Records For Selected Data Extension Based On Search Email Address ? \");\n      if(okToRefresh){\n         if(selectedRows.length == 0){\n              alert(\"Please Select Any Row From The Table Which You Want To Delete !\");\n              const loading = document.getElementById('cover-spin');\n              loading.style.display = 'none';\n            }\n         else{\n           var deleteRecord = selectedDEDelete(conigJSON);\n         }\n      }\n      else{\n        const loading = document.getElementById('cover-spin');\n        loading.style.display = 'none';\n      }\n}\n/*\nfunction selectedDEDelete(conigJSON){\n  \n          return new Promise(function(resolve, reject) {\n        const xhr = new XMLHttpRequest();\n        xhr.timeout = 30 * 1000;\n        xhr.open('POST', 'https://cloud.email-v2force.com/deleteRecord', true);\n        xhr.setRequestHeader('Content-type', 'application/json');\n        xhr.onload = () => {\n            if (xhr.status === 0 || (xhr.status >= 200 && xhr.status < 400)) {\n                resolve(JSON.parse(xhr.response))\n            } else {\n                reject(xhr.status)\n            }\n          return xhr.response;\n        }\n        xhr.onerror = () => {\n            if (debugging) console.log('Connection Error')\n        }\n        xhr.ontimeout = () => {\n            if (debugging) console.log('Request Timed Out')\n        };\n        xhr.send(JSON.stringify(conigJSON));\n    })  \n}*/\n  \nfunction selectedDEDelete(conigJSON){\n            const xhttp = new XMLHttpRequest();\n            var scatterSeries = [];\n            xhttp.onreadystatechange = function() {\n             if (this.readyState === 4) {\n                    //const loading = document.getElementById('cover-spin');\n                    //loading.style.display = 'none';\n                    if (this.status === 200) {\n                        //deleteRecord.innerHTML = this.responseText;\n                        var data = JSON.parse(this.responseText);\n                        //var emailInput = document.getElementById('contnetSearch').innerHTML;\n                        //reteriveRecords(emailInput);\n                        console.log(data);\n                        const loading = document.getElementById('cover-spin');\n                        loading.style.display = 'none';\n                    if (data) {\n                            const tableRows = document.querySelectorAll(\"#my-table tbody tr\");\n                              tableRows.forEach((row) => {\n                                const subKeyValu = row.children[1].textContent;\n                                if (data.some(obj => obj.SubscriberKey === subKeyValu && obj.Status === \"OK\")) {\n                                  row.remove();\n                                }\n                              });\n                           const allObjectsOK = data.every(obj => obj.Status === \"OK\");\n                           if (allObjectsOK) {\n                              // display toast message for all OK\n                              var toast = document.getElementById(\"snackbar\");\n                              toast.innerHTML = \"Subscriber Records Deleted From The Selected Data Extensions\";\n                              toast.className = \"show\";\n                              toast.style.backgroundColor = \"#49932e\";\n                              setTimeout(function(){\n                                toast.className = toast.className.replace(\"show\", \"\");\n                              }, 10000);\n                             var emailInput = document.getElementById('contnetSearch').innerHTML;\n                             //reteriveRecords(emailInput);\n                            } else {\n                              const notOKObj = data.find(obj => obj.Status !== \"OK\");\n                              // display toast message for not OK object\n                              var toast = document.getElementById(\"snackbar\");\n                              toast.innerHTML = `Data Extenison: ${notOKObj.DataExtensionName} Record Not Deleted. Please Check Again`;          toast.style.backgroundColor = \"#a91212\";\n                              toast.className = \"show\";\n                              setTimeout(function(){\n                                toast.className = toast.className.replace(\"show\", \"\");\n                              }, 10000);\n                              //console.log(`Object with ID ${notOKObj.DataExtensionName} has status ${notOKObj.status}`);\n                            }\n                      \n                  } else {\n                      var toast = document.getElementById(\"snackbar\");\n                      toast.innerHTML = \"No Subscriber Records Deleted Please Check Data Extension Must Contains EmailAddress, SubscriberKey Attributes\";\n                      toast.className = \"show\";\n                      toast.style.backgroundColor = \"#a91212\";\n                      setTimeout(function(){\n                        toast.className = toast.className.replace(\"show\", \"\");\n                      }, 10000);\n                  }\n                   } else {\n                        var toast = document.getElementById(\"snackbar\");\n                        toast.innerHTML =  \"Error: \" + this.status + \" Please Reload Page Again ! \" + this.statusText;; \n                        toast.className = \"show\";\n                        toast.style.backgroundColor = \"#a91212\";\n                        setTimeout(function(){\n                          toast.className = toast.className.replace(\"show\", \"\");\n                        }, 10000);\n                     \n                    }\n                }\n            };\n            xhttp.open('POST', 'https://cloud.email-v2force.com/deleteSubscriberDataRecord', true);\n            xhttp.setRequestHeader('Content-Type', 'application/json');\n            xhttp.send(JSON.stringify(conigJSON));\n}\n  \n// subscriberStatusUpdate\nfunction UpdateStatus(){\n  \n  var btn = window.event.target;\n  // Get the row containing the button that was clicked\n  var row = btn.parentNode.parentNode;\n\n  // Get the values of each column in the row\n  var subscriber = row.cells[0].innerHTML;\n  const subscriberKey = subscriber.trim();\n  \n  var listId = row.cells[1].innerHTML;\n  const ListID = listId.trim();\n  \n  var listName = row.cells[2].innerHTML;\n  const ListName = listName.trim();\n  \n  var dataFolder = row.cells[3].innerHTML;\n  const DataFolder = dataFolder.trim();\n  \n  var status = row.cells[5].innerHTML;\n  const getStatus = status.trim();\n\n  if(getStatus == \"Unsubscribed\" && ListName != \"All Subscribers\"){\n        \n          const objStatusUpdate = {\n              \"SubscriberKey\": subscriberKey,\n              \"ListID\":ListID,\n              \"ListName\":ListName,\n              \"Folder\":DataFolder,\n              \"Status\": getStatus\n           };\n    \n         var okToRefresh = confirm(\" IF You Want To Active this Subscriber. It will autometically get Active From ALL Subscriber List. \");\n         if(okToRefresh){\n              requestForStatusUpdate(objStatusUpdate);\n            }\n     }\n  else{\n         const objStatusUpdate = {\n              \"SubscriberKey\": subscriberKey,\n              \"ListID\":ListID,\n              \"ListName\":ListName,\n              \"Folder\":DataFolder,\n              \"Status\": getStatus\n           };\n         var okToRefresh = confirm(\"Do you really want to change the \"+objStatusUpdate[\"SubscriberKey\"]+\" status ?\");\n             if(okToRefresh){\n                  requestForStatusUpdate(objStatusUpdate);\n                }\n  }\n  \n  //console.log(firstName);\n  //alert('suscriber--');\n  //var subscriberKey = window.event.target.id;\n  //var status = window.event.target.name;\n  //var emailInput = document.getElementById('name').value;\n  \n  /*const objStatusUpdate = {\n          \"SubscriberKey\": subscriberKey,\n          \"Status\": getStatus\n      };\n      var okToRefresh = confirm(\"Do you really want to change the \"+objStatusUpdate[\"SubscriberKey\"]+\" status ?\");\n      if(okToRefresh){\n          var requestPromise = requestForStatusUpdate(objStatusUpdate);\n          //console.log(\"Respons For Client\" +requestPromise);\n          //location.reload(); \n      }*/\n  \n}\nfunction requestForStatusUpdate(objStatusUpdate){\n\nconst xhttp = new XMLHttpRequest();\n            var scatterSeries = [];\n            xhttp.onreadystatechange = function() {\n             if (this.readyState === 4) {\n                    const loading = document.getElementById('cover-spin');\n                    loading.style.display = 'none';\n                    if (this.status === 200) {\n                        //var div = document.querySelector('#subscriberData');\n                        //div.innerHTML = \"\";\n                        //results.innerHTML = \"\";\n                        //deleteRecord.innerHTML = this.responseText;\n                        var data = JSON.parse(this.responseText);\n                        var responseStatus = data[\"Status\"];\n                         var responseMessage = data[\"Message\"];\n                        if(responseStatus == \"OK\"){\n                            getSubscriberDetails();\n                            var toast = document.getElementById(\"snackbar\");\n                            toast.innerHTML = responseMessage;\n                            toast.className = \"show\";\n                            toast.style.backgroundColor = \"#49932e\";\n                            setTimeout(function(){\n                              toast.className = toast.className.replace(\"show\", \"\");\n                            }, 3000);\n                           }\n                         else{\n                            getSubscriberDetails();\n                            var toast = document.getElementById(\"snackbar\");\n                            toast.innerHTML = responseMessage;\n                            toast.className = \"show\";\n                            toast.style.backgroundColor = \"#a91212\";\n                            setTimeout(function(){\n                              toast.className = toast.className.replace(\"show\", \"\");\n                            }, 3000);\n                           \n                         }\n                        //var emailInput = document.getElementById('name').value;\n                   } else {\n                        var toast = document.getElementById(\"snackbar\");\n                        toast.innerHTML = \"Error: \" + this.status + \" \" + this.statusText;\n                        toast.className = \"show\";\n                        toast.style.backgroundColor = \"#a91212\";\n                        setTimeout(function(){\n                          toast.className = toast.className.replace(\"show\", \"\");\n                        }, 5000);\n                        //results.innerHTML = \"Error: \" + this.status + \" \" + this.statusText;\n                    }\n                }\n            };\n            xhttp.open('POST', 'https://cloud.email-v2force.com/updateSubscriber', true);\n            xhttp.setRequestHeader('Content-Type', 'application/json');\n            xhttp.send(JSON.stringify(objStatusUpdate));\n  \n}\n  \n//remove susbcriber details div element\n/*function removeElement(){\n  var div = document.getElementById(\"subscriberData\");\n  var childElements = div.children;\n    for (var i = 0; i < childElements.length; i++) {\n      var element = childElements[i];\n      if (element.tagName == \"BUTTON\" && element.tagName == \"P\") {\n        div.removeChild(element);\n     }\n    }\n}*/\n</script>\n</body>\n</html>","meta":{},"slots":{"col1":{"design":"<p style=\"font-family:arial;color:#ccc;font-size:11px;text-align:center;vertical-align:middle;font-weight:bold;padding:10px;margin:0;border:#ccc dashed 1px;\">Drop blocks or content here</p>","modelVersion":2}},"modelVersion":2}}},"content":{"channelTypeId":3,"contentType":"text/html","isDefault":true,"isStaticContent":true,"name":"getDataExtenisonDetails"},"definition":{"collectionId":"{{mcpm#/entities/cloudPageCollections/407/data/collectionId}}","description":"","domain":"{{mcpm:cloudPages-domain}}","isNoFollow":false,"isNoIndex":false,"key":"getDataExtension","name":"getDataExtenisonDetails","pageTypeId":3,"requiresSsl":true,"url":"https://cloud.email-v2force.com/getDataExtension"},"name":"getDataExtenisonDetails","state":{"contentType":"text/html","description":"","name":"getDataExtenisonDetails"}}}},"queryActivities":{},"registeredCustomActivities":{},"scriptActivities":{},"sendDefinitions":{},"sharedDataExtensions":{},"siteMapVersions":{"262735-30":{"issues":[],"originID":"262735-30","originEID":"mch4s3mv5j6r7tyf5xqf8s0-y2wm","data":{"name":"Version 1","siteMap":{"micrositeId":"{{mcpm#/entities/microsites/262735/data/micrositeId}}","name":"Version 1","styling":"{\"orientation\":\"horizontal\",\"alignment\":\"left\",\"backgroundColor\":\"#666666\",\"margin\":0,\"padding\":10,\"borderColor\":\"#666666\",\"borderWidth\":1,\"borderStyle\":\"solid\",\"color\":\"#fff\",\"borderPosition\":\"none\",\"fontFamily\":\"arial\",\"fontWeight\":\"normal\",\"fontSize\":12,\"fontStyle\":\"normal\",\"textDecoration\":\"none\",\"hasDropdownArrows\":true,\"css\":\".cp-nav-wrapper {\\r\\n\\tz-index: 1;\\r\\n}\\r\\n.cp-nav {\\r\\n\\tbackground-color: #666666;\\r\\n\\tfont-size: 12px;\\r\\n\\tline-height: normal;\\r\\n\\tmargin: 0px !important;\\r\\n\\tposition: relative;\\r\\n\\ttext-align: left;\\r\\n\\tz-index: 1;\\r\\n}\\r\\n.cp-nav a {\\r\\n\\twhite-space: nowrap;\\r\\n}\\r\\n.cp-nav > li {\\r\\n\\tbackground-color: #666666;\\r\\n\\tdisplay: inline-block;\\r\\n\\tposition: relative;\\r\\n}\\r\\n.cp-nav > li > a {\\r\\n\\tcolor: #fff;\\r\\n\\tcursor: pointer;\\r\\n\\tdisplay: inline-block;\\r\\n\\tfont-family: arial;\\r\\n\\tfont-size: 12px;\\r\\n\\tpadding: 10px;\\r\\n\\ttext-align: left;\\r\\n\\tborder: none;\\r\\n}\\r\\n.cp-nav > li > .drop-arrow {\\r\\n\\tfill: #fff !important;\\r\\n\\tcursor: pointer;\\r\\n\\tdisplay: inline-block;\\r\\n\\tpadding: 10px 5px;\\r\\n\\tvertical-align: middle;\\r\\n}\\r\\n.cp-nav > li:hover {\\r\\n\\tbackground-color: #666666 !important;\\r\\n}\\r\\n.cp-nav > li.open > a,\\r\\n.cp-nav > li:hover > a {\\r\\n\\tcolor: #fff;\\r\\n\\tfont-family: arial;\\r\\n\\tfont-size: 12px;\\r\\n\\ttext-decoration: none;\\r\\n\\tborder: none;\\r\\n}\\r\\n.cp-nav > li.open > .drop-arrow,\\r\\n.cp-nav > li:hover > .drop-arrow {\\r\\n\\tdisplay: inline-block;\\r\\n\\t-webkit-transform: rotate(180deg);\\r\\n\\t-ms-transform: rotate(180deg);\\r\\n\\ttransform: rotate(180deg);\\r\\n}\\r\\n.cp-nav > li.open > .cp-subnav,\\r\\n.cp-nav > li:hover > .cp-subnav {\\r\\n\\tdisplay: block;\\r\\n}\\r\\n.cp-nav .cp-subnav {\\r\\n\\tborder-radius: 0;\\r\\n\\tborder: none;\\r\\n\\tdisplay: none;\\r\\n\\tmargin: 0;\\r\\n\\toverflow: hidden;\\r\\n\\tpadding: 0;\\r\\n\\tposition: absolute;\\r\\n\\tleft: 0;\\r\\n\\tright: auto;\\r\\n}\\r\\n.cp-nav .cp-subnav > li {\\r\\n\\tbackground-color: #666666;\\r\\n}\\r\\n.cp-nav .cp-subnav > li > a {\\r\\n\\tcolor: #fff;\\r\\n\\tcursor: pointer;\\r\\n\\tdisplay: inline-block;\\r\\n\\tfont-family: arial;\\r\\n\\tfont-size: 12px;\\r\\n\\tpadding: 10px;\\r\\n\\ttext-align: left;\\r\\n\\tborder: none;\\r\\n}\\r\\n.cp-nav .cp-subnav > li:hover {\\r\\n\\tbackground-color: #666666;\\r\\n}\\r\\n.cp-nav .cp-subnav > li.open > a,\\r\\n.cp-nav .cp-subnav > li:hover > a {\\r\\n\\tbackground-image: none;\\r\\n\\tcolor: #fff;\\r\\n\\tfont-family: arial;\\r\\n\\tfont-size: 12px;\\r\\n\\ttext-decoration: none;\\r\\n\\tborder: none;\\r\\n}\\r\\n.cp-nav .hamburger-sprite {\\r\\n\\tdisplay: none;\\r\\n}\\r\\n@media(max-width: 320px) {\\r\\n\\t.cp-nav {\\r\\n\\t\\theight: 32px;\\r\\n\\t}\\r\\n\\t.cp-nav li {\\r\\n\\t\\tfloat: left;\\r\\n\\t\\tclear: both;\\r\\n\\t\\twidth: 160px;\\r\\n\\t}\\r\\n\\t.cp-nav > li {\\r\\n\\t\\tdisplay: none;\\r\\n\\t}\\r\\n\\t.cp-nav > li > a {\\r\\n\\t\\tdisplay: inline-block;\\r\\n\\t}\\r\\n\\t.cp-nav.open li {\\r\\n\\t\\tdisplay: inline-block;\\r\\n\\t}\\r\\n\\t.cp-nav .cp-subnav {\\r\\n\\t\\tposition: static;\\r\\n\\t}\\r\\n\\t.cp-nav .hamburger-sprite {\\r\\n\\t\\tcursor: pointer;\\r\\n\\t\\tdisplay: block;\\r\\n\\t\\tfloat: left;\\r\\n\\t\\tfill: #fff;\\r\\n\\t\\theight: 12px;\\r\\n\\t\\tpadding: 10px;\\r\\n\\t\\twidth: 12px;\\r\\n\\t}\\r\\n\\t.cp-nav .hamburger-sprite.open {\\r\\n\\t\\tfill: #fff;\\r\\n\\t}\\r\\n}\",\"topStylesNormal\":{\"backgroundColor\":\"#666666\",\"borderColor\":\"#666666\",\"borderWidth\":1,\"borderPosition\":\"none\",\"borderStyle\":\"solid\",\"color\":\"#fff\",\"fontFamily\":\"arial\",\"fontWeight\":\"normal\",\"fontSize\":12,\"fontStyle\":\"normal\",\"textDecoration\":\"none\",\"hasDropdownArrows\":true},\"topStylesHover\":{\"backgroundColor\":\"#666666\",\"borderColor\":\"#666666\",\"borderWidth\":1,\"borderPosition\":\"none\",\"borderStyle\":\"solid\",\"color\":\"#fff\",\"fontFamily\":\"arial\",\"fontWeight\":\"normal\",\"fontSize\":12,\"fontStyle\":\"normal\",\"textDecoration\":\"none\",\"hasDropdownArrows\":true},\"subStylesNormal\":{\"backgroundColor\":\"#666666\",\"borderColor\":\"#666666\",\"borderWidth\":1,\"borderPosition\":\"none\",\"borderStyle\":\"solid\",\"color\":\"#fff\",\"fontFamily\":\"arial\",\"fontWeight\":\"normal\",\"fontSize\":12,\"fontStyle\":\"normal\",\"textDecoration\":\"none\",\"hasDropdownArrows\":true},\"subStylesHover\":{\"backgroundColor\":\"#666666\",\"borderColor\":\"#666666\",\"borderWidth\":1,\"borderPosition\":\"none\",\"borderStyle\":\"solid\",\"color\":\"#fff\",\"fontFamily\":\"arial\",\"fontWeight\":\"normal\",\"fontSize\":12,\"fontStyle\":\"normal\",\"textDecoration\":\"none\",\"hasDropdownArrows\":true}}"},"links":[]}}},"subscriberLists":{},"verificationActivities":{}},"selectedEntities":{"assets":[],"attributeGroups":[],"automations":[],"cloudPageCollections":["407"],"dataExtensions":[],"journeys":[],"journeyTemplates":[],"sharedDataExtensions":[]}}
